<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李传格的博客]]></title>
  <link href="https://jacoli.github.io/atom.xml" rel="self"/>
  <link href="https://jacoli.github.io/"/>
  <updated>2019-03-26T11:46:09+08:00</updated>
  <id>https://jacoli.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[对移动客户端技术的思考]]></title>
    <link href="https://jacoli.github.io/15535700326071.html"/>
    <updated>2019-03-26T11:13:52+08:00</updated>
    <id>https://jacoli.github.io/15535700326071.html</id>
    <content type="html"><![CDATA[
<p>14年到16年 客户端相关技术快速发展，大家在这方面的研究和落地结果非常多，插件化，包管理，组件化，各种脚手架和研发体系，换肤，热更新，动态化，跨平台，等等。各种技术和项目不断出现，百花齐放，那是移动客户端快速发展的阶段。现在，客户端的技术早已趋于稳定，同时偏重于运营的移动互联网对动态化的需求更为强烈。在这方面，前端，大前端更有优势，也更容易落地，也更为标准化。早期在动态化上的探索，主要集中在H5和Hybrid H5，之后还出现各种native的json动态化方案，还有以各种特有DSL去描述UI的方案，16年Facebook发起的react native项目，彻底点燃了前端跨平台演进的激情，weex随后跟进，再到flutter的出现。同时，前端框架react，Vue，angular的不断成熟，在构建前端/移动应用上，变得更加简单。</p>

<p>总体上，移动客户端开发早已进入稳定期，技术框架开发模式成熟，各种配套设施齐全。前端这几年的发展日新月异，到目前为止，以Vue/React/Angular为代表的前端框架也趋于稳定，周边配套也较为齐全，开发模式也趋于稳定，都以组件化和标准化为指导原则。以RN/Weex/Flutter为基础的大前端技术也趋于稳定，开发模式稳定了，周边配套也完善了，后续更多地会在框架性能稳定性开发效率上做文章，应用层面不会大动干戈了，但小的变动仍会有不少。敬那些逝去的项目框架，期待这些新框架仍能不断带来惊喜。</p>

<p>在对这些框架的使用和反哺上，大公司和小公司也必然是迥异的策略，小公司拿来即用，再配合一些胶水层代码，甚至这些代码也取之三方。大部分框架在追求通用性的同时，必然会在易用性上打折，大公司有能力也有人力对其深度定制，满足自身需求，提高使用效率，也能反馈给社区，甚至新的轮子就出来了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术知识导图]]></title>
    <link href="https://jacoli.github.io/15524404049139.html"/>
    <updated>2019-03-13T09:26:44+08:00</updated>
    <id>https://jacoli.github.io/15524404049139.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">硬件</h2>

<ul>
<li>CPU、内存、总线、I/O</li>
</ul>

<h2 id="toc_1">操作系统</h2>

<ul>
<li>对硬件资源封装，对外提供基础服务。</li>
<li>内核、网络、进程/线程、文件、显示、其他各种硬件驱动。</li>
<li>提供系统库，内核态/用户态。</li>
<li>跨平台接口 POSIX</li>
</ul>

<h2 id="toc_2">驱动开发/嵌入式开发</h2>

<h2 id="toc_3">编程语言</h2>

<ul>
<li>C/C++、OC、Java、JS、Swift、Kotlin、Python、PHP、Dart。</li>
<li>类型、集合、字符串、控制流、运算、函数/闭包/Lambada、结构体/类/枚举、方法/属性、接口/协议、继承、扩展、泛型、协程。</li>
<li>编程范式：面向过程、面向对象、面向切片、函数反应式。</li>
<li>AOT/JIT、解释执行、编译执行。</li>
<li>由系统直接运行还是在虚拟机上运行。</li>
<li>代码编译、代码转换。</li>
</ul>

<h2 id="toc_4">数据结构和算法</h2>

<h2 id="toc_5">网络</h2>

<h2 id="toc_6">数据库</h2>

<h2 id="toc_7">设计模式和架构</h2>

<h2 id="toc_8">分布式系统</h2>

<h2 id="toc_9">虚拟机/容器技术</h2>

<h2 id="toc_10">大数据</h2>

<h2 id="toc_11">云计算</h2>

<h2 id="toc_12">人工智能</h2>

<h2 id="toc_13">服务端开发</h2>

<h2 id="toc_14">PC客户端&amp;Web</h2>

<h2 id="toc_15">移动客户端&amp;Web&amp;小程序</h2>

<h3 id="toc_16">基础能力建设</h3>

<ul>
<li>通用能力，框架设计、网络、存储、图片、音视频、日志、配置、路由、数据管理/消息总线、H5容器、硬件能力、数据绑定。</li>
<li>UI能力，UI组件、布局、渲染、动画、主题。</li>
<li>动态化能力，JSON组件、Weex/RN、Hybrid H5、Flutter。</li>
</ul>

<h3 id="toc_17">上层业务解藕</h3>

<ul>
<li>登录、分享、支付、广告、导购、下单、订单、售后、用户。</li>
</ul>

<h3 id="toc_18">研发体系</h3>

<ul>
<li>webpack，脚手架</li>
<li>CI、包管理、ESLint/OSLint</li>
<li>缺陷管理</li>
<li>功能测试、性能测试、集成测试</li>
</ul>

<h3 id="toc_19">运营体系</h3>

<ul>
<li>大盘数据、ABTest、营销系统</li>
</ul>

<h3 id="toc_20">运维体系</h3>

<ul>
<li>渠道发布、数据监控</li>
</ul>

<h2 id="toc_21">视频/游戏</h2>

<h2 id="toc_22">AR/VR</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[React Native]]></title>
    <link href="https://jacoli.github.io/15523541981699.html"/>
    <updated>2019-03-12T09:29:58+08:00</updated>
    <id>https://jacoli.github.io/15523541981699.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p><a href="https://juejin.im/post/5a6460f8f265da3e4f0a446d">https://juejin.im/post/5a6460f8f265da3e4f0a446d</a> React Native for Android 原理分析与实践：实现原理</p></li>
<li><p><a href="https://www.cnblogs.com/android-blogs/p/5623481.html">https://www.cnblogs.com/android-blogs/p/5623481.html</a> 其实没那么复杂！探究react-native通信机制</p></li>
<li><p>Native与JS之间调用方式，Bridge。</p></li>
<li><p>在jsi.h中Runtime抽象类，申明了JS执行已经与Native互调的接口。在iOS和Android中分别实现。iOS的JSCRuntime，直接调用iOS系统提供JavaScriptCore框架。Android则额外引入jsc.so包提供，JavaScriptCore的功能。</p></li>
<li><p>Native和JS两端都保存模块、方法数据的注册表。</p></li>
<li><p>通道优化，JS调用Naitve，先push到MessageQueue，等Native有调用时，顺带批量返回（如果5毫秒内，没有Native调用事件，则主动flush queue）。</p></li>
<li><p>JS代码执行，Native与JS消息通信等都是通过该Bridge进行。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift]]></title>
    <link href="https://jacoli.github.io/15516874524849.html"/>
    <updated>2019-03-04T16:17:32+08:00</updated>
    <id>https://jacoli.github.io/15516874524849.html</id>
    <content type="html"><![CDATA[
<ul>
<li>basic types</li>
<li>operators</li>
<li>strings &amp; collections</li>
<li>flow control</li>
<li>method &amp; closure</li>
<li>structure &amp; class</li>
<li>enumeration</li>
<li>extension &amp; protocol</li>
<li>optional chaining</li>
<li>generics</li>
<li>memory</li>
<li>access safety</li>
<li>error handle</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[杂]]></title>
    <link href="https://jacoli.github.io/15514141804337.html"/>
    <updated>2019-03-01T12:23:00+08:00</updated>
    <id>https://jacoli.github.io/15514141804337.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">技术</h3>

<ul>
<li>技术、框架、功能都是为了解决某个问题、帮助某个业务而出现，在实现的选择上，有可能会受到当时场景、条件等各种因素影响，在当时可能是最优的选择，但也可能存在些副作用。</li>
<li>更看重长期的收益，在短期上，可能需要额外付出，需要投入人力、物力。</li>
<li>技术、框架、方案会过时，也许有些技术能存在很长时间，适应很多变化，但在新需求、新环境面前，总会有些心有余力不足。这时要么还在原来基础上修修补补，要么革就出新，刨除历史包袱，作出新的变革。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跨端方案]]></title>
    <link href="https://jacoli.github.io/15512326160968.html"/>
    <updated>2019-02-27T09:56:56+08:00</updated>
    <id>https://jacoli.github.io/15512326160968.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">UI系统</h3>

<ul>
<li>UI系统包含UI元素的布局、渲染和UI事件的捕获、传递、处理等。</li>
<li>iOS、Android、Web、微信小程序、其他小程序都有各自的原生UI系统。</li>
</ul>

<h3 id="toc_1">系统服务</h3>

<ul>
<li>原生系统的各种能力，来自硬件的、软件的。</li>
</ul>

<h3 id="toc_2">开发语言不同、运行环境不同</h3>

<h3 id="toc_3">开发模式不同</h3>

<h3 id="toc_4">跨端方案</h3>

<ul>
<li>不同原生系统上的UI系统和系统服务是有差别和相似的，跨端方案是尽量屏蔽这些差异，对应用开发者来说，开发体验是一致的的、透明的，就像jQuery屏蔽不同Web浏览器间的差异性。</li>
<li>需要做到这点，跨端方案需要提供包括DSL、Runtime、组件库、工具链等，一整套屏蔽原生系统开发和运行的差异。 </li>
</ul>

<h4 id="toc_5">Runtime</h4>

<ul>
<li>Runtime需要支撑DSL在原生系统的运行，需要桥接到到原生系统服务、原生UI系统，需要提供自有或轻或重的UI渲染系统，需要提供对自有组件库或三方组件库的访问等。</li>
<li>UI引擎，轻的方案是直接桥接到原生UI系统，引擎只做UI数据的处理、转换、传递，重的方案是基于跨平台的渲染方案如OpenGL做一套自己的UI系统。 </li>
</ul>

<h4 id="toc_6">组件库</h4>

<ul>
<li>自有、三方、原生系统的组件库等等。</li>
</ul>

<h4 id="toc_7">工具链</h4>

<ul>
<li>开发阶段，需要提供转换器或编译器，对DSL的支持，IDE，等等。</li>
<li>调试阶段，调试工具、方式。</li>
<li>测试阶段，测试工具。</li>
<li>部署阶段，本地部署、远程部署。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift]]></title>
    <link href="https://jacoli.github.io/15499585996277.html"/>
    <updated>2019-02-12T16:03:19+08:00</updated>
    <id>https://jacoli.github.io/15499585996277.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="https://swift.org/source-compatibility/#current-list-of-projects">https://swift.org/source-compatibility/#current-list-of-projects</a></li>
</ul>

<h3 id="toc_0">Pods</h3>

<ul>
<li><p>Assets问题 <a href="https://mp.weixin.qq.com/s?__biz=MzA5NzMwODI0MA==&amp;mid=2647759665&amp;idx=1&amp;sn=4b1f2fde434f1b45ff3eac627a7b7fd9">https://mp.weixin.qq.com/s?__biz=MzA5NzMwODI0MA==&amp;mid=2647759665&amp;idx=1&amp;sn=4b1f2fde434f1b45ff3eac627a7b7fd9</a></p></li>
<li><p>组件化-动态库实战 <a href="http://www.cocoachina.com/ios/20170427/19136.html">http://www.cocoachina.com/ios/20170427/19136.html</a></p></li>
<li><p>iOS 动态库和静态库的的区别 动态库的隔离与静态库的吸附问题以及解决方法 <a href="https://blog.csdn.net/clovejq/article/details/71107796">https://blog.csdn.net/clovejq/article/details/71107796</a></p></li>
<li><p>Thunk程序的实现原理以及在iOS中的应用  <a href="https://juejin.im/post/5c5281e0e51d45517334dd34">https://juejin.im/post/5c5281e0e51d45517334dd34</a></p></li>
<li><p>Chameleon原理详解：其它跨多端统一框架都是假的？<a href="https://mp.weixin.qq.com/s/F8ernZ57jseKNJgwGopNxg">https://mp.weixin.qq.com/s/F8ernZ57jseKNJgwGopNxg</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果开发文档]]></title>
    <link href="https://jacoli.github.io/15498732238184.html"/>
    <updated>2019-02-11T16:20:23+08:00</updated>
    <id>https://jacoli.github.io/15498732238184.html</id>
    <content type="html"><![CDATA[
<p><a href="https://developer.apple.com/library/archive/navigation/">https://developer.apple.com/library/archive/navigation/</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Mach-O]]></title>
    <link href="https://jacoli.github.io/15498647909565.html"/>
    <updated>2019-02-11T13:59:50+08:00</updated>
    <id>https://jacoli.github.io/15498647909565.html</id>
    <content type="html"><![CDATA[
<ul>
<li>深入剖析iOS动态链接库 <a href="https://www.jianshu.com/p/1de663f64c05">https://www.jianshu.com/p/1de663f64c05</a></li>
</ul>

<pre><code class="language-text">/**
 * Created by BeeHive.
 * Copyright (c) 2016, Alibaba, Inc. All rights reserved.
 *
 * This source code is licensed under the GNU GENERAL PUBLIC LICENSE.
 * For the full copyright and license information,please view the LICENSE file in the root directory of this source tree.
 */


#import &quot;BHAnnotation.h&quot;
#import &quot;BHCommon.h&quot;
#include &lt;mach-o/getsect.h&gt;
#include &lt;mach-o/loader.h&gt;
#include &lt;mach-o/dyld.h&gt;
#include &lt;dlfcn.h&gt;
#import &lt;objc/runtime.h&gt;
#import &lt;objc/message.h&gt;
#include &lt;mach-o/ldsyms.h&gt;

NSArray&lt;NSString *&gt;* BHReadConfiguration(char *sectionName,const struct mach_header *mhp);
static void dyld_callback(const struct mach_header *mhp, intptr_t vmaddr_slide)
{
    NSArray *mods = BHReadConfiguration(BeehiveModSectName, mhp);
    for (NSString *modName in mods) {
        Class cls;
        if (modName) {
            cls = NSClassFromString(modName);
            
            if (cls) {
                [[BHModuleManager sharedManager] registerDynamicModule:cls];
            }
        }
    }
    
    //register services
    NSArray&lt;NSString *&gt; *services = BHReadConfiguration(BeehiveServiceSectName,mhp);
    for (NSString *map in services) {
        NSData *jsonData =  [map dataUsingEncoding:NSUTF8StringEncoding];
        NSError *error = nil;
        id json = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&amp;error];
        if (!error) {
            if ([json isKindOfClass:[NSDictionary class]] &amp;&amp; [json allKeys].count) {
                
                NSString *protocol = [json allKeys][0];
                NSString *clsName  = [json allValues][0];
                
                if (protocol &amp;&amp; clsName) {
                    [[BHServiceManager sharedManager] registerService:NSProtocolFromString(protocol) implClass:NSClassFromString(clsName)];
                }
                
            }
        }
    }
    
}
__attribute__((constructor))
void initProphet() {
    _dyld_register_func_for_add_image(dyld_callback);
}

NSArray&lt;NSString *&gt;* BHReadConfiguration(char *sectionName,const struct mach_header *mhp)
{
    NSMutableArray *configs = [NSMutableArray array];
    unsigned long size = 0;
#ifndef __LP64__
    uintptr_t *memory = (uintptr_t*)getsectiondata(mhp, SEG_DATA, sectionName, &amp;size);
#else
    const struct mach_header_64 *mhp64 = (const struct mach_header_64 *)mhp;
    uintptr_t *memory = (uintptr_t*)getsectiondata(mhp64, SEG_DATA, sectionName, &amp;size);
#endif
    
    unsigned long counter = size/sizeof(void*);
    for(int idx = 0; idx &lt; counter; ++idx){
        char *string = (char*)memory[idx];
        NSString *str = [NSString stringWithUTF8String:string];
        if(!str)continue;
        
        BHLog(@&quot;config = %@&quot;, str);
        if(str) [configs addObject:str];
    }
    
    return configs;

    
}

@implementation BHAnnotation

@end



</code></pre>

<pre><code class="language-text">__attribute__((constructor)) void before_main() {
    printf(&quot;--- %s\n&quot;, __func__);
}

__attribute__((destructor)) void after_main() {
    printf(&quot;--- %s\n&quot;, __func__);
}


</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP2]]></title>
    <link href="https://jacoli.github.io/15490095279690.html"/>
    <updated>2019-02-01T16:25:27+08:00</updated>
    <id>https://jacoli.github.io/15490095279690.html</id>
    <content type="html"><![CDATA[
<p>HTTP,HTTP2.0,SPDY,HTTPS你应该知道的一些事 <a href="http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/">http://www.alloyteam.com/2016/07/httphttp2-0spdyhttps-reading-this-is-enough/</a></p>

<p>HTTP/2 新特性总结 <a href="https://www.jianshu.com/p/67c541a421f9">https://www.jianshu.com/p/67c541a421f9</a></p>

<ul>
<li>http2能带来如下这些收益：<br/>
1、多路复用、多个HTTP可以在同个TCP连接上同时发送。<br/>
2、优先级<br/>
3、header压缩<br/>
4、Server Push</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对开发的思考]]></title>
    <link href="https://jacoli.github.io/15490075081945.html"/>
    <updated>2019-02-01T15:51:48+08:00</updated>
    <id>https://jacoli.github.io/15490075081945.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">开发环节</h2>

<ul>
<li>开发、集成、测试、部署、运维</li>
</ul>

<p>如何协同，解藕、组件化、平台化</p>

<ul>
<li>研发平台</li>
<li>运维平台</li>
<li>营销平台</li>
</ul>

<h2 id="toc_1">衡量</h2>

<ul>
<li>效率、质量 -&gt; 效能、价值</li>
</ul>

<h2 id="toc_2">网络</h2>

<ul>
<li>移动网关</li>
<li>HTTP DNS</li>
<li>直连、加速</li>
<li>HTTP/2</li>
<li>加密、压缩</li>
<li>业务接口协议</li>
<li>代理、Mock、Debug、测试、诊断</li>
<li>长连接</li>
<li>推送</li>
<li>服务端、客户端二方包</li>
</ul>

<h2 id="toc_3">存储</h2>

<ul>
<li>关系数据存储</li>
<li>非关系数据存储</li>
<li>缓存</li>
<li>读写分离</li>
<li>mmap</li>
</ul>

<h2 id="toc_4">图片</h2>

<ul>
<li>图片格式</li>
<li>域名收敛</li>
<li>CDN</li>
<li>图片质量、大小</li>
<li>渐进式</li>
<li>失败率</li>
</ul>

<h2 id="toc_5">视频</h2>

<ul>
<li>格式</li>
<li>云存储、本地存储</li>
<li>视频播放</li>
<li>视频流</li>
<li>弹幕</li>
</ul>

<h2 id="toc_6">日志</h2>

<ul>
<li>本地日志</li>
<li>远程日志</li>
<li>聚合</li>
</ul>

<h2 id="toc_7">统计</h2>

<h2 id="toc_8">调试工具</h2>

<h2 id="toc_9">Web容器</h2>

<h2 id="toc_10">设计模式&amp;架构</h2>

<h2 id="toc_11">动态化方案</h2>

<h2 id="toc_12">UI框架</h2>

<ul>
<li>组件库</li>
<li>页面模式</li>
</ul>

<h2 id="toc_13">三方业务</h2>

<ul>
<li>支付</li>
<li>分享</li>
<li>OAuth登录</li>
<li>推送</li>
<li>地图</li>
<li>直播</li>
</ul>

<h2 id="toc_14">自有业务</h2>

<ul>
<li>登录</li>
<li>电商</li>
<li>营销</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fishhook]]></title>
    <link href="https://jacoli.github.io/15490016925851.html"/>
    <updated>2019-02-01T14:14:52+08:00</updated>
    <id>https://jacoli.github.io/15490016925851.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p><a href="https://www.jianshu.com/p/4d86de908721">https://www.jianshu.com/p/4d86de908721</a></p></li>
<li><p>Mach-O文件结构 <a href="https://www.jianshu.com/p/1f22d1e667e3">https://www.jianshu.com/p/1f22d1e667e3</a></p></li>
<li><p>MachOView</p></li>
</ul>

<pre><code class="language-text">- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    //这里必须要先加载一次NSLog，如果不写NSLog，符号表里面根本就不会出现NSLog的地址
    NSLog(@&quot;123&quot;); 

    //定义rebinding结构体
    struct rebinding nslogBind;
    //函数的名称
    nslogBind.name = &quot;NSLog&quot;;
    //新的函数地址
    nslogBind.replacement = myMethod;
    //保存原始函数地址变量的指针
    nslogBind.replaced = (void *)&amp;old_nslog;
    
    //定义数组
    struct rebinding rebs[] = {nslogBind};
    
    /**
     arg1: 存放rebinding结构体的数组
     arg2: 数组的长度
     */
    rebind_symbols(rebs, 1);
}

//函数指针，用来保存原始的函数地址
static void (*old_nslog)(NSString *format, ...);

//新的NSLog
void myMethod(NSString *format, ...) {
    //再调用原来的
    old_nslog(@&quot;勾上了！&quot;);
}

- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event {
    NSLog(@&quot;点击屏幕&quot;);
}
</code></pre>

<h2 id="toc_0">lldb</h2>

<ul>
<li>iOS之LLDB常用命令 <a href="https://www.jianshu.com/p/7fb43e0b956a">https://www.jianshu.com/p/7fb43e0b956a</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI框架、编程范式]]></title>
    <link href="https://jacoli.github.io/15488220197262.html"/>
    <updated>2019-01-30T12:20:19+08:00</updated>
    <id>https://jacoli.github.io/15488220197262.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">移动客户端、H5、小程序</h2>

<ul>
<li>iOS native编码、Android native编码、Weex方案、React Native方案、小程序的mpvue方案、小程序的wepy方案</li>
</ul>

<h3 id="toc_1">iOS UI编码方式</h3>

<ul>
<li>使用Objective-C/Swift构建基于ViewController的原生页面。</li>
</ul>

<h3 id="toc_2">Android UI编码方式</h3>

<ul>
<li>Java、AndroidSDK、kotlin</li>
<li>Activity/Flagment + XML构建原生页面。</li>
</ul>

<h3 id="toc_3">Weex/RN</h3>

<ul>
<li>DSL转换打包成Bundle，部署下发的目标环境上，在Weex引擎或RN引擎上运行，桥接到原生的UI框架。 </li>
</ul>

<p>DSL -- transform --&gt; bundle -- distribution --&gt; run in engine --&gt; adaptor layer (bridge with native / render in native)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美团2018技术合集 阅读笔记]]></title>
    <link href="https://jacoli.github.io/15487552906072.html"/>
    <updated>2019-01-29T17:48:10+08:00</updated>
    <id>https://jacoli.github.io/15487552906072.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">mpvue</h3>

<p><a href="https://tech.meituan.com/2018/03/11/mt-mpvue-development-framework.html">https://tech.meituan.com/2018/03/11/mt-mpvue-development-framework.html</a></p>

<ul>
<li>使用vue.js开发小程序</li>
<li>原理：增加一个中间层，将小程序的生命周期、事件、数据同步等桥接到vue对象。</li>
</ul>

<h3 id="toc_1">Flutter</h3>

<p><a href="https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html">https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html</a></p>

<ul>
<li>全新思路的跨平台的移动客户端UI方案。</li>
<li>不同于Weex或ReactNative将JS数据代理到Native UI库做渲染，Flutter直接使用更加底层的图形渲染接口，从更底层去接管消息事件，在此基础上，封装跨平台的UI库。</li>
<li>对于UI层来说，这样的跨平台更彻底，一致性更强。</li>
<li>核心引擎+Widget库</li>
</ul>

<h3 id="toc_2">Picasso 大众点评自研的Native动态化方案</h3>

<p><a href="https://tech.meituan.com/2018/06/21/picasso-the-future.html">https://tech.meituan.com/2018/06/21/picasso-the-future.html</a></p>

<ul>
<li>对比</li>
</ul>

<p>Hybrid WebView<br/>
Weex、RN、Flutter</p>

<ul>
<li><p>基本原理<br/>
DSL（TypeScript）-》 PModel -〉 iOS、Android、H5、小程序渲染引擎 -》 UI</p></li>
<li><p>DSL</p></li>
<li><p>核心SDK + 适配层 + 脚手架</p></li>
<li><p>开发流程</p></li>
</ul>

<p>VSCode + 插件</p>

<ul>
<li>发布流程</li>
</ul>

<p>Picasso文件 -〉JS Bundle -》 部署服务器 -〉Picasso执行环境（iOS、Android、H5、小程序）-》渲染引擎</p>

<h3 id="toc_3">美团客户端响应式框架Easy React</h3>

<p><a href="https://tech.meituan.com/2018/07/19/react-programming-framework-easyreact-opensource.html">https://tech.meituan.com/2018/07/19/react-programming-framework-easyreact-opensource.html</a></p>

<ul>
<li>对比ReactiveCocoa、ReactiveX</li>
<li>基于Objective-C</li>
<li>EasyMVVM</li>
</ul>

<h3 id="toc_4">Logan:美团点评的开源移动端基础日志库 - 美团技术团队</h3>

<p><a href="https://tech.meituan.com/2018/10/11/logan-open-source.html">https://tech.meituan.com/2018/10/11/logan-open-source.html</a></p>

<h3 id="toc_5">MCI:移动持续集成在大众点评的实践</h3>

<p><a href="https://tech.meituan.com/2018/07/12/mci.html">https://tech.meituan.com/2018/07/12/mci.html</a></p>

<h3 id="toc_6">美团外卖Android Crash治理之路</h3>

<p><a href="https://tech.meituan.com/2018/06/14/waimai-android-crash.html">https://tech.meituan.com/2018/06/14/waimai-android-crash.html</a></p>

<h3 id="toc_7">运营平台</h3>

<ul>
<li>运营、平台管理、前端开发</li>
<li>同一个运营位，多维度内容的展示。</li>
<li>运营效果</li>
</ul>

<h3 id="toc_8">监控系统</h3>

<h3 id="toc_9">HTTP服务治理框架</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书目录]]></title>
    <link href="https://jacoli.github.io/15485137190847.html"/>
    <updated>2019-01-26T22:41:59+08:00</updated>
    <id>https://jacoli.github.io/15485137190847.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">技术类</h2>

<h3 id="toc_1">基础</h3>

<ul>
<li>《代码整洁指导Clean Code》</li>
<li>《图解HTTP》</li>
<li>《深入浅出HTTPS》</li>
<li>《Wireshark网络分析的艺术》</li>
<li>《Wireshark网络分析就这么简单》</li>
<li>《算法竞赛入门经典》</li>
<li>《程序员代码面试指南》</li>
<li>《架构即未来》</li>
</ul>

<h3 id="toc_2">前端</h3>

<ul>
<li>《高性能网站建设进阶指南》</li>
<li>《网站性能监测与优化》</li>
<li>《精通CSS：高级Web标准解决方案》</li>
<li>《单页Web应用：JavaScript从前端到后端》</li>
<li>《HTML5移动Web开发指南》</li>
<li>《前端架构设计》</li>
<li>《现代前端技术解析》</li>
<li>《React全栈》</li>
<li>《指尖上行 移动前端开发进阶之路》</li>
<li>《现代前端技术解析》</li>
<li>《前端工程化：体系设计和实践》</li>
<li>《React Native移动开发实战》</li>
<li>《JavaScript之美》</li>
<li>《Vue.js权威指南》</li>
<li>《移动Web手册》</li>
<li>《响应式Web设计全流程解析》</li>
<li>《网页制作与网站建设实战大全》</li>
</ul>

<h3 id="toc_3">客户端</h3>

<ul>
<li>《iOS面试之道》</li>
<li>《iOS应用逆向工程》</li>
<li>《iOS应用安全权威指南》</li>
<li>《iOS应用安全攻防》</li>
<li>《iOS和macOS性能优化》</li>
<li>《iOS应用安全攻防实战》</li>
<li>《疯狂iOS讲义》</li>
<li>《Android高级进阶》</li>
<li>《Android软件安全与逆向分析》</li>
<li>《疯狂Android讲义》</li>
<li>《Android进阶之光》</li>
<li>《App架构师实践指南》</li>
<li>《App研发录》</li>
<li>《音视频开发进阶指南》</li>
<li>《Building iPhone Apps with HTML CSS JavaScript》</li>
</ul>

<h3 id="toc_4">后端</h3>

<ul>
<li>《大型网站技术架构 核心原理与案例分析》 </li>
<li>《深入分析Java Web技术内幕》</li>
<li>《Java程序员面试笔试宝典》</li>
<li>《大型网站系统与Java中间件实践》</li>
<li>《Java程序性能优化》</li>
<li>《深入浅出MyBatis技术原理与实战》</li>
<li>《JavaEE开发的颠覆者：Spring Boot实战》</li>
<li>《云计算架构技术与实践》</li>
<li>《Spring Cloud与Docker微服务架构实战》</li>
<li>《这就是搜索引擎》</li>
<li>《大数据之路》</li>
<li>《阿里巴巴Java开发手册》</li>
<li>《码出高效：Java开发手册》</li>
</ul>

<h3 id="toc_5">架构</h3>

<h3 id="toc_6">其他</h3>

<ul>
<li>《写给大家看的设计书》</li>
<li>《卓有成效的管理者》</li>
<li>《麦肯锡教我的写作武器》</li>
<li>《金字塔原理》</li>
<li>《安静：内向性格的竞争力》</li>
<li>《支付战争：互联网金融创世纪》★★★★☆<br/>
PayPal诞生及成长史，面对众多竞争对手的生死突围，以及围绕PayPal的人的故事。</li>
<li>《Web全栈工程师的自我修养》，余果，★★★☆☆</li>
<li>《黑客与画家》</li>
<li>《专业主义》</li>
<li>《打造Facebook》</li>
<li>《Getting Real》</li>
<li>《从0到1:开启商业与未来的秘密》</li>
<li>《代码大全》</li>
<li>《代码未来》</li>
<li>《禅与摩托维修艺术》</li>
<li>《鸟哥的Linux私房菜》</li>
<li>《只是为了好玩：Linux之父林纳斯自传》</li>
<li>《软件随想录》</li>
<li>《卓有成效的程序员》</li>
<li>《联盟：互联网时代的人才变革》</li>
<li>《创业维艰：如何完成比难更难的事》</li>
<li>《数据化管理：洞悉零售及电子商务运营》</li>
<li>《场景革命：重构人与商业的连接》</li>
<li>《独角兽之路》</li>
<li>《品牌课》</li>
<li>《团队建设与管理》</li>
<li>《互联网思维：云计算、物联网、大数据》</li>
<li>《程序员修炼之道：从小工到专家》</li>
<li>《区块链技术指南》</li>
<li>《互联网时代盈利模式》</li>
<li>《人工智能》</li>
<li>《码农翻身》</li>
<li>《未来地图：技术、商业和我们的选择》</li>
</ul>

<h2 id="toc_7">鸡汤</h2>

<ul>
<li>《掘金：互联网+时代创业黄金指南》</li>
<li>《合伙人时代》</li>
<li>《联盟》</li>
<li>《创业维艰》</li>
<li>《我看电商3:零售的变革》《我看电商》《我看电商2》《走出电商困局》</li>
<li>《硅谷之谜》</li>
<li>《浪潮之巅》</li>
<li>《一个电商运营总监的自白》</li>
<li>《软技能 代码之外的生存指南》</li>
<li>《黑科技》</li>
<li>《数学之美》</li>
<li>《文明之光》</li>
<li>《你就是极客：软件开发人员生存指南》</li>
<li>《重来》</li>
<li>《精益创业》</li>
</ul>

<h2 id="toc_8">管理类</h2>

<h2 id="toc_9">文学类</h2>

<ul>
<li>《孤独深处》</li>
<li>《去远方》</li>
<li>《必然》</li>
<li>反乌托邦小说三部曲：《1984》《美丽新世界》《我们》</li>
<li>《火星崛起》三部</li>
<li>《巨人的陨落》</li>
<li>《流浪苍穹》</li>
<li>《解忧杂货铺》</li>
<li>《1984动物农场》</li>
<li>丹·布朗系列</li>
</ul>

<h2 id="toc_10">其他</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS审核]]></title>
    <link href="https://jacoli.github.io/15482114330729.html"/>
    <updated>2019-01-23T10:43:53+08:00</updated>
    <id>https://jacoli.github.io/15482114330729.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">上传审核附件解决办法（注意事项）</h3>

<p>1.上传的文件必须是png格式（直接修改后缀名不可以），并且文件大小限制在5M内。<br/>
2.上传文件的命名不要有汉字，要用字母。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记]]></title>
    <link href="https://jacoli.github.io/15481440187560.html"/>
    <updated>2019-01-22T16:00:18+08:00</updated>
    <id>https://jacoli.github.io/15481440187560.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="https://www.jianshu.com/p/4d86de908721">https://www.jianshu.com/p/4d86de908721</a></li>
</ul>

<h3 id="toc_0">微服务</h3>

<p><a href="https://www.tuicool.com/articles/aIjeiq3">单体到微服务是一个演化过程，别在一开始就过度设计</a></p>

<p>“ The Art of Scalability ”一书描述了一种 三维可伸缩性模型 （AKF Scale Cube），其中三个轴分别代表了不同类型的缩放：</p>

<p>X：水平复制和克隆；-&gt; (Docker，容器)<br/>
Y：功能分解和分割（微服务）；<br/>
Z：水平数据分区（分片）。</p>

<h3 id="toc_1">微服务架构设计</h3>

<p><a href="https://www.cnblogs.com/wintersun/p/6219259.html">微服务架构设计</a></p>

<h3 id="toc_2">vue</h3>

<p><a href="https://juejin.im/post/5c488a3cf265da615705cc2a?utm_source=tuicool&amp;utm_medium=referral">https://juejin.im/post/5c488a3cf265da615705cc2a?utm_source=tuicool&amp;utm_medium=referral</a></p>

<h3 id="toc_3">社交</h3>

<p>Tumblr、Pinterest……一个个想创造新模式的应用都失败了，它们改变了什么又为何没落？ | 好奇心商业史</p>

<p><a href="https://www.qdaily.com/articles/60688.html?utm_source=tuicool&amp;utm_medium=referral">https://www.qdaily.com/articles/60688.html?utm_source=tuicool&amp;utm_medium=referral</a></p>

<p>三个软件可能要被整合到一起：WhatsApp、Instagram和Facebook Messenger</p>

<p><a href="https://www.qdaily.com/articles/60669.html">https://www.qdaily.com/articles/60669.html</a></p>

<p>数据垄断和信息孤岛，是如何驯化我们的？<br/>
<a href="https://www.huxiu.com/article/282751.html?utm_source=tuicool&amp;utm_medium=referral">https://www.huxiu.com/article/282751.html?utm_source=tuicool&amp;utm_medium=referral</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018-3-15]]></title>
    <link href="https://jacoli.github.io/15480586858677.html"/>
    <updated>2019-01-21T16:18:05+08:00</updated>
    <id>https://jacoli.github.io/15480586858677.html</id>
    <content type="html"><![CDATA[
<p>客户端上的一个页面搭建采用哪种架构，往往取决与页面类型。</p>

<p>展示型页面</p>

<p>数据从数据层到展示层单向流动</p>

<p>表单型页面</p>

<p>数据在数据层和展示层双向流动</p>

<p>交互型页面</p>

<p>展示层不仅展示数据，还有大量动画，操作行为等</p>

<h2 id="toc_0">组件</h2>

<p>系统底层框架<br/>
网络<br/>
存储<br/>
缓存<br/>
序列化<br/>
架构<br/>
组件化<br/>
工程化<br/>
数据监控<br/>
日志<br/>
性能<br/>
Crash<br/>
安全<br/>
图片<br/>
视频、音频<br/>
AR、VR、ML<br/>
UI组件<br/>
屏幕分辨率<br/>
布局、样式<br/>
渲染<br/>
研发效率<br/>
编程语言、OC/Swift、OOP、AOP、FP<br/>
Hybrid<br/>
Native动态化<br/>
热补丁<br/>
小程序<br/>
PWA<br/>
编译<br/>
部署</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术图谱]]></title>
    <link href="https://jacoli.github.io/15478658194063.html"/>
    <updated>2019-01-19T10:43:39+08:00</updated>
    <id>https://jacoli.github.io/15478658194063.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p><a href="media/15478658194063/%E7%94%B5%E5%95%86%E8%84%91%E7%88%86%E5%9B%BE.xmind">电商脑爆图</a></p></li>
<li><p><a href="media/15478658194063/%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1.xmind">技术图谱</a></p></li>
<li><p><a href="media/15478658194063/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.xmind">性能优化</a></p></li>
<li><p><a href="media/15478658194063/%E7%A7%BB%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9B%BE%E8%B0%B1.xmind">移动客户端开发图谱</a></p></li>
<li><p><a href="media/15478658194063/iOS%E6%A1%86%E6%9E%B6%E6%A2%B3%E7%90%86.xmind">iOS框架梳理</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于软件架构的思考]]></title>
    <link href="https://jacoli.github.io/15478657684777.html"/>
    <updated>2019-01-19T10:42:48+08:00</updated>
    <id>https://jacoli.github.io/15478657684777.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/7485920?fr=aladdin">软件架构</a></li>
<li>架构服务于效率、质量、体验、性能等</li>
<li>架构优化的短期成本和长期收益的权衡</li>
<li>架构要与当前业务发展和团队规模相匹配</li>
<li>架构设计的方法论和实践
<code>
解耦：模块化、组件化，<br/>
复用：基础组件，<br/>
分层：视图、业务、基础服务，<br/>
协议化等
</code></li>
<li><a href="http://www.infoq.com/cn/news/2017/06/VirtualAPK-opensource?utm_source=news_about_architecture-design&amp;utm_medium=link&amp;utm_campaign=architecture-design">滴滴插件化项目VirtualAPK开源</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286672&amp;idx=1&amp;sn=4d9db00c496fcafd1d3e01d69af083f9&amp;chksm=8334cc92b4434584e8bdb117274f41145fb49ba467ec0cd9ba5e3551a8abf92f1996bd6b147a&amp;mpshare=1&amp;scene=24&amp;srcid=0630STw0N4c83hIAqLo9Tkdm&amp;key=c969774f949c279bf4404f575b096d071dfd21b85924484756752b237733d001fc998a2a59df09557a1190be7ce550df361bb8e62077f558b516011b3c3ce705b5cef390bed833792073e747cdcbbb2e&amp;ascene=0&amp;uin=MTc0NzM4NzU0MA%3D%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=k43tzMF8U5%2FPsgUiLvhHQo3sXCCiUaVGAY20v8HBLLe9kKAiqhQfHGbhVeDiDq29">微信Android模块化架构重构实践</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;mid=2650400348&amp;idx=1&amp;sn=99bc1bce932c5b9000d5b54afa2de70e&amp;chksm=83952e44b4e2a752f2ef0aa2f31c80ff82a2dfdaef433cd5cb733f17eb9ff47899acbde09685&amp;mpshare=1&amp;scene=24&amp;srcid=0630xBc1VqyISqqlOOeGof54&amp;key=c969774f949c279b41505ca7d0c3b547b7694aae72cd532f903bcc00efbc8c9cec1a5a62405a2a17223d09a370575852d2e0306768755c1ad00e0309a7e8dc1ae557ebf30f727d82012dfa50e4f07acc&amp;ascene=0&amp;uin=MTc0NzM4NzU0MA%3D%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=k43tzMF8U5%2FPsgUiLvhHQo3sXCCiUaVGAY20v8HBLLe9kKAiqhQfHGbhVeDiDq29">Atlas-手淘组件化框架的前世今生和未来的路</a></li>
<li>架构的保持</li>
<li>代码之外</li>
</ul>

]]></content>
  </entry>
  
</feed>
