<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李传格的博客]]></title>
  <link href="https://jacoli.github.io/atom.xml" rel="self"/>
  <link href="https://jacoli.github.io/"/>
  <updated>2019-03-26T11:28:32+08:00</updated>
  <id>https://jacoli.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[对移动客户端技术的思考]]></title>
    <link href="https://jacoli.github.io/15535700326071.html"/>
    <updated>2019-03-26T11:13:52+08:00</updated>
    <id>https://jacoli.github.io/15535700326071.html</id>
    <content type="html"><![CDATA[
<p>14年到16年 客户端相关技术快速发展，大家在这方面的研究和落地结果非常多，插件化，包管理，组件化，各种脚手架和研发体系，换肤，热更新，动态化，跨平台，等等。各种技术和项目不断出现，百花齐放，那是移动客户端快速发展的阶段。现在，客户端的技术早已趋于稳定，同时偏重于运营的移动互联网对动态化的需求更为强烈。在这方面，前端，大前端更有优势，也更容易落地，也更为标准化。早期在动态化上的探索，主要集中在H5和Hybrid H5，之后还出现各种native的json动态化方案，还有以各种特有DSL去描述UI的方案，16年Facebook发起的react native项目，彻底点燃了前端跨平台演进的激情，weex随后跟进，再到flutter的出现。同时，前端框架react，Vue，angular的不断成熟，在构建前端/移动应用上，变得更加简单。</p>

<p>总体上，移动客户端开发早已进入稳定期，技术框架开发模式成熟，各种配套设施齐全。前端这几年的发展日新月异，到目前为止，以Vue/React/Angular为代表的前端框架也趋于稳定，周边配套也较为齐全，开发模式也趋于稳定，都以组件化和标准化为指导原则。以RN/Weex/Flutter为基础的大前端技术也趋于稳定，开发模式稳定了，周边配套也完善了，后续更多地会在框架性能稳定性开发效率上做文章，应用层面不会大动干戈了，但小的变动仍会有不少。敬那些逝去的项目框架，期待这些新框架仍能不断带来惊喜。</p>

<p>在对这些框架的使用和反哺上，大公司和小公司也必然是迥异的策略，小公司拿来即用，再配合一些胶水层代码，甚至这些代码也取之三方。大部分框架在追求通用性的同时，必然会在易用性上打折，大公司有能力也有人力对其深度定制，满足自身需求，提高使用效率，也能反馈给社区，甚至新的轮子就出来了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书目录]]></title>
    <link href="https://jacoli.github.io/15485137190847.html"/>
    <updated>2019-01-26T22:41:59+08:00</updated>
    <id>https://jacoli.github.io/15485137190847.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">技术类</h2>

<h3 id="toc_1">基础</h3>

<ul>
<li>《代码整洁指导Clean Code》</li>
<li>《图解HTTP》</li>
<li>《深入浅出HTTPS》</li>
<li>《Wireshark网络分析的艺术》</li>
<li>《Wireshark网络分析就这么简单》</li>
<li>《算法竞赛入门经典》</li>
<li>《程序员代码面试指南》</li>
<li>《架构即未来》</li>
</ul>

<h3 id="toc_2">前端</h3>

<ul>
<li>《高性能网站建设进阶指南》</li>
<li>《网站性能监测与优化》</li>
<li>《精通CSS：高级Web标准解决方案》</li>
<li>《单页Web应用：JavaScript从前端到后端》</li>
<li>《HTML5移动Web开发指南》</li>
<li>《前端架构设计》</li>
<li>《现代前端技术解析》</li>
<li>《React全栈》</li>
<li>《指尖上行 移动前端开发进阶之路》</li>
<li>《现代前端技术解析》</li>
<li>《前端工程化：体系设计和实践》</li>
<li>《React Native移动开发实战》</li>
<li>《JavaScript之美》</li>
<li>《Vue.js权威指南》</li>
<li>《移动Web手册》</li>
<li>《响应式Web设计全流程解析》</li>
<li>《网页制作与网站建设实战大全》</li>
</ul>

<h3 id="toc_3">客户端</h3>

<ul>
<li>《iOS面试之道》</li>
<li>《iOS应用逆向工程》</li>
<li>《iOS应用安全权威指南》</li>
<li>《iOS应用安全攻防》</li>
<li>《iOS和macOS性能优化》</li>
<li>《iOS应用安全攻防实战》</li>
<li>《疯狂iOS讲义》</li>
<li>《Android高级进阶》</li>
<li>《Android软件安全与逆向分析》</li>
<li>《疯狂Android讲义》</li>
<li>《Android进阶之光》</li>
<li>《App架构师实践指南》</li>
<li>《App研发录》</li>
<li>《音视频开发进阶指南》</li>
<li>《Building iPhone Apps with HTML CSS JavaScript》</li>
</ul>

<h3 id="toc_4">后端</h3>

<ul>
<li>《大型网站技术架构 核心原理与案例分析》 </li>
<li>《深入分析Java Web技术内幕》</li>
<li>《Java程序员面试笔试宝典》</li>
<li>《大型网站系统与Java中间件实践》</li>
<li>《Java程序性能优化》</li>
<li>《深入浅出MyBatis技术原理与实战》</li>
<li>《JavaEE开发的颠覆者：Spring Boot实战》</li>
<li>《云计算架构技术与实践》</li>
<li>《Spring Cloud与Docker微服务架构实战》</li>
<li>《这就是搜索引擎》</li>
<li>《大数据之路》</li>
<li>《阿里巴巴Java开发手册》</li>
<li>《码出高效：Java开发手册》</li>
</ul>

<h3 id="toc_5">架构</h3>

<h3 id="toc_6">其他</h3>

<ul>
<li>《写给大家看的设计书》</li>
<li>《卓有成效的管理者》</li>
<li>《麦肯锡教我的写作武器》</li>
<li>《金字塔原理》</li>
<li>《安静：内向性格的竞争力》</li>
<li>《支付战争：互联网金融创世纪》★★★★☆<br/>
PayPal诞生及成长史，面对众多竞争对手的生死突围，以及围绕PayPal的人的故事。</li>
<li>《Web全栈工程师的自我修养》，余果，★★★☆☆</li>
<li>《黑客与画家》</li>
<li>《专业主义》</li>
<li>《打造Facebook》</li>
<li>《Getting Real》</li>
<li>《从0到1:开启商业与未来的秘密》</li>
<li>《代码大全》</li>
<li>《代码未来》</li>
<li>《禅与摩托维修艺术》</li>
<li>《鸟哥的Linux私房菜》</li>
<li>《只是为了好玩：Linux之父林纳斯自传》</li>
<li>《软件随想录》</li>
<li>《卓有成效的程序员》</li>
<li>《联盟：互联网时代的人才变革》</li>
<li>《创业维艰：如何完成比难更难的事》</li>
<li>《数据化管理：洞悉零售及电子商务运营》</li>
<li>《场景革命：重构人与商业的连接》</li>
<li>《独角兽之路》</li>
<li>《品牌课》</li>
<li>《团队建设与管理》</li>
<li>《互联网思维：云计算、物联网、大数据》</li>
<li>《程序员修炼之道：从小工到专家》</li>
<li>《区块链技术指南》</li>
<li>《互联网时代盈利模式》</li>
<li>《人工智能》</li>
<li>《码农翻身》</li>
<li>《未来地图：技术、商业和我们的选择》</li>
</ul>

<h2 id="toc_7">鸡汤</h2>

<ul>
<li>《掘金：互联网+时代创业黄金指南》</li>
<li>《合伙人时代》</li>
<li>《联盟》</li>
<li>《创业维艰》</li>
<li>《我看电商3:零售的变革》《我看电商》《我看电商2》《走出电商困局》</li>
<li>《硅谷之谜》</li>
<li>《浪潮之巅》</li>
<li>《一个电商运营总监的自白》</li>
<li>《软技能 代码之外的生存指南》</li>
<li>《黑科技》</li>
<li>《数学之美》</li>
<li>《文明之光》</li>
<li>《你就是极客：软件开发人员生存指南》</li>
<li>《重来》</li>
<li>《精益创业》</li>
</ul>

<h2 id="toc_8">管理类</h2>

<h2 id="toc_9">文学类</h2>

<ul>
<li>《孤独深处》</li>
<li>《去远方》</li>
<li>《必然》</li>
<li>反乌托邦小说三部曲：《1984》《美丽新世界》《我们》</li>
<li>《火星崛起》三部</li>
<li>《巨人的陨落》</li>
<li>《流浪苍穹》</li>
<li>《解忧杂货铺》</li>
<li>《1984动物农场》</li>
<li>丹·布朗系列</li>
</ul>

<h2 id="toc_10">其他</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[问题：UICollectionView Cell之间存在缝隙]]></title>
    <link href="https://jacoli.github.io/15480679782005.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782005.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">原因</h2>

<ul>
<li><p>当<code>UICollectionViewCell</code>的size不为整数时，<code>UICollectionViewFlowLayout</code>在布局计算时，可能会调整Cell的frame.origin，使Cell按照最小物理像素（渲染像素）对齐，导致出现缝隙。</p></li>
<li><p>假设当前Cell的frame.origin.y=100.8（逻辑像素），转化成渲染像素（参考备注）是201.6（iPhone 8）或302.4（iPhone 8 Plus）。为了按渲染像素对齐，<code>UICollectionViewFlowLayout</code>应该会四舍五入取整，取整后为202（iPhone 8）或302（iPhone 8 Plus），转成逻辑像素101（iPhone 8）或100.667（iPhone 8 Plus），导致在iphone8上就会出现0.2像素的缝隙。</p></li>
<li><p>分辨率相关的，可以百度下。</p></li>
</ul>

<h2 id="toc_1">简单解决办法：</h2>

<ul>
<li>主动把Cell的size取整，不丢给<code>UICollectionViewFlowLayout</code>处理。
<code>
- (CGSize)fixedCollectionCellSize:(CGSize)size {<br/>
CGFloat scale = [UIScreen mainScreen].scale;<br/>
return CGSizeMake(round(scale * size.width) / scale, round(scale * size.height) / scale);<br/>
}
</code></li>
</ul>

<h2 id="toc_2">Demo实验</h2>

<ul>
<li>UITableView，Cell高度设置成100.12，没有强制被按渲染像素对齐，如 <code>99.62</code> <code>1802.16</code>  <code>1902.28</code></li>
</ul>

<pre><code class="language-text">(lldb) po [0x7fb85b83b800 recursiveDescription]
&lt;UITableView: 0x7fb85b83b800; frame = (0 0; 375 667); clipsToBounds = YES; gestureRecognizers = &lt;NSArray: 0x6000004451f0&gt;; layer = &lt;CALayer: 0x60000022dc40&gt;; contentOffset: {0, 1272.5}; contentSize: {375, 2002.4000549316406}; adjustedContentInset: {20, 0, 0, 0}&gt;
   | &lt;UITableViewCell: 0x7fb85c862a00; frame = (0 1902.28; 375 100.12); autoresize = W; layer = &lt;CALayer: 0x6040004265a0&gt;&gt;
   |    | &lt;UITableViewCellContentView: 0x7fb85b70fea0; frame = (0 0; 375 99.62); gestureRecognizers = &lt;NSArray: 0x6040002426a0&gt;; layer = &lt;CALayer: 0x604000425e80&gt;&gt;
   |    |    | &lt;UIImageView: 0x7fb85b41a330; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = &lt;CALayer: 0x6000008215c0&gt;&gt;
   |    | &lt;_UITableViewCellSeparatorView: 0x7fb85b710820; frame = (15 99.62; 360 0.5); layer = &lt;CALayer: 0x604000427640&gt;&gt;
   | &lt;UITableViewCell: 0x7fb85c862400; frame = (0 1802.16; 375 100.12); autoresize = W; layer = &lt;CALayer: 0x6040002212e0&gt;&gt;
</code></pre>

<ul>
<li>iPhone Plus 8，UICollectionView，Cell高度设置成100.12，强制被按渲染像素对齐了，frame.origin.y被调整后的值，如<code>200.333</code> <code>500.667</code> <code>600.667</code></li>
</ul>

<pre><code class="language-text">   | &lt;UICollectionViewCell: 0x7fdd9f71f010; frame = (0 200.333; 414 100.12); hidden = YES; layer = &lt;CALayer: 0x60000023d800&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f71f470; frame = (0 300.333; 414 100.12); layer = &lt;CALayer: 0x60000023e380&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72aa30; frame = (0 400.333; 414 100.12); layer = &lt;CALayer: 0x60000023f4e0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72ae90; frame = (0 500.667; 414 100.12); layer = &lt;CALayer: 0x60000023f9a0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72b510; frame = (0 600.667; 414 100.12); layer = &lt;CALayer: 0x60000023fbc0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72d1a0; frame = (0 701; 414 100.12); layer = &lt;CALayer: 0x60000023fdc0&gt;&gt;
</code></pre>

<ul>
<li>iPhone Plus，UICollectionView，Cell高度设置成100.12，强制被按渲染像素对齐了，frame.origin.y被调整后的值，如<code>300.5</code> <code>400.5</code> <code>500.5</code></li>
</ul>

<pre><code class="language-text">   | &lt;UICollectionViewCell: 0x7f85b441b6c0; frame = (0 0; 375 100.12); hidden = YES; layer = &lt;CALayer: 0x600000035ec0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4502e10; frame = (0 100; 375 100.12); hidden = YES; layer = &lt;CALayer: 0x600000035c20&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4505c10; frame = (0 200; 375 100.12); layer = &lt;CALayer: 0x600000036300&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4506400; frame = (0 300.5; 375 100.12); layer = &lt;CALayer: 0x600000036be0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4506d70; frame = (0 400.5; 375 100.12); layer = &lt;CALayer: 0x600000227ac0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4507560; frame = (0 500.5; 375 100.12); layer = &lt;CALayer: 0x6000002277c0&gt;&gt;
</code></pre>

<h3 id="toc_3">备注</h3>

<p>Points（逻辑像素）&lt;---&gt;Rendered Pixels（渲染像素）&lt;---&gt;Physical Pixels（物理像素）</p>

<p><img src="https://upload-images.jianshu.io/upload_images/1824896-195d0d1574cf13c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS不同机型尺寸.png"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Layout]]></title>
    <link href="https://jacoli.github.io/15480679782500.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782500.html</id>
    <content type="html"><![CDATA[
<p>1、添加约束条件时，必须存在父视图或共同的父视图<br/>
2、auto layout engine计算时，必须知道位置和大小的约束<br/>
3、但某子视图启动auto layout约束后，父视图也随之启动<br/>
4、frame自动转换成auto layout约束<br/>
5、UILabel、UIImageVIew、UIButton、UITextField等，如果没有设置大小约束，则由intrinsicContentSize隐式提供，当内容改变后，intrinsicContentSize随之改变，并驱动auto layout engine重新计算<br/>
6、content hugging priority（内容收缩优先级）和content compression resistance priority （内容放大优先级）和intrinsicContentSize 一起决定大小的计算</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppLink]]></title>
    <link href="https://jacoli.github.io/15480679782446.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782446.html</id>
    <content type="html"><![CDATA[
<p><img src="http://upload-images.jianshu.io/upload_images/1824896-e9fe114c4419d41e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-09-13 下午2.09.46.png"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebView In Mobile App]]></title>
    <link href="https://jacoli.github.io/15480679782625.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782625.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="http://blog.csdn.net/carson_ho/article/details/52693322"><a href="http://blog.csdn.net/carson_ho/article/details/52693322">Android：最全面的 Webview 详解</a></a></li>
<li><a href="http://blog.csdn.net/carson_ho/article/details/64904691"><a href="http://blog.csdn.net/carson_ho/article/details/64904691">Android：你要的WebView与 JS 交互方式 都在这里了</a></a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/5645025.html"><a href="http://www.cnblogs.com/whoislcj/p/5645025.html">Android混合开发之WebView使用总结</a></a></li>
<li><a href="http://www.open-open.com/lib/view/open1472481479625.html">还在用Android自带的WebView组件？太Out了！</a></li>
<li><a href="http://blog.csdn.net/u011904605/article/details/52301416">关于Android APP集成腾讯X5 WebKit</a></li>
<li><a href="https://github.com/lzyzsd/JsBridge">JsBridge</a></li>
<li><a href="http://www.cnblogs.com/oc-bowen/p/5547900.html">UIWebView和WKWebView的使用及js交互</a></li>
<li><a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavascriptBridge</a></li>
<li>淘宝的Windvane、微信的小程序也算是Hybrid框架，在WebView基础上，提供组件定制化、规范化、性能优化、访问Native能力等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于电商的脑爆、YY]]></title>
    <link href="https://jacoli.github.io/15480679570014.html"/>
    <updated>2019-01-21T18:52:37+08:00</updated>
    <id>https://jacoli.github.io/15480679570014.html</id>
    <content type="html"><![CDATA[
<p><img src="http://upload-images.jianshu.io/upload_images/1824896-376342729f32f6b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-07-22 下午2.20.43.png"/></p>

<p><img src="http://upload-images.jianshu.io/upload_images/1824896-74963cccc535cd20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-07-22 下午2.21.00.png"/></p>

<p>1、用户系统：会员信息、地址管理等</p>

<p>2、商品系统：商品库、SKU、类目、库存、购物车</p>

<p>3、营销系统：运营位、优惠券、活动</p>

<p>4、交易系统：下单、支付、订单、逆向</p>

<p>5、报表 对账 结算</p>

<p>6、内容系统：文章、专辑、视频</p>

<p>7、搜索、推荐</p>

<p>7、其他：物流、推送</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[* [什么是软件架构](https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/7485920?fr=aladdin)]]></title>
    <link href="https://jacoli.github.io/15480679781845.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679781845.html</id>
    <content type="html"><![CDATA[
<ul>
<li>架构服务于效率、质量、体验、性能等</li>
<li>架构优化的短期成本和长期收益的权衡</li>
<li>架构要与当前业务发展和团队规模相匹配</li>
<li>架构设计的方法论和实践
<code>
解耦：模块化、组件化，<br/>
复用：基础组件，<br/>
分层：视图、业务、基础服务，<br/>
协议化等
</code></li>
<li><a href="http://www.infoq.com/cn/news/2017/06/VirtualAPK-opensource?utm_source=news_about_architecture-design&amp;utm_medium=link&amp;utm_campaign=architecture-design">滴滴插件化项目VirtualAPK开源</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286672&amp;idx=1&amp;sn=4d9db00c496fcafd1d3e01d69af083f9&amp;chksm=8334cc92b4434584e8bdb117274f41145fb49ba467ec0cd9ba5e3551a8abf92f1996bd6b147a&amp;mpshare=1&amp;scene=24&amp;srcid=0630STw0N4c83hIAqLo9Tkdm&amp;key=c969774f949c279bf4404f575b096d071dfd21b85924484756752b237733d001fc998a2a59df09557a1190be7ce550df361bb8e62077f558b516011b3c3ce705b5cef390bed833792073e747cdcbbb2e&amp;ascene=0&amp;uin=MTc0NzM4NzU0MA%3D%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=k43tzMF8U5%2FPsgUiLvhHQo3sXCCiUaVGAY20v8HBLLe9kKAiqhQfHGbhVeDiDq29">微信Android模块化架构重构实践</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;mid=2650400348&amp;idx=1&amp;sn=99bc1bce932c5b9000d5b54afa2de70e&amp;chksm=83952e44b4e2a752f2ef0aa2f31c80ff82a2dfdaef433cd5cb733f17eb9ff47899acbde09685&amp;mpshare=1&amp;scene=24&amp;srcid=0630xBc1VqyISqqlOOeGof54&amp;key=c969774f949c279b41505ca7d0c3b547b7694aae72cd532f903bcc00efbc8c9cec1a5a62405a2a17223d09a370575852d2e0306768755c1ad00e0309a7e8dc1ae557ebf30f727d82012dfa50e4f07acc&amp;ascene=0&amp;uin=MTc0NzM4NzU0MA%3D%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=k43tzMF8U5%2FPsgUiLvhHQo3sXCCiUaVGAY20v8HBLLe9kKAiqhQfHGbhVeDiDq29">Atlas-手淘组件化框架的前世今生和未来的路</a></li>
<li>架构的保持</li>
<li>代码之外：人的因素</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络相关]]></title>
    <link href="https://jacoli.github.io/15480679781942.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679781942.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="https://github.com/Tencent/mars/">Mars</a></li>
<li><a href="http://www.iteye.com/news/32012"><a href="http://www.iteye.com/news/32012">微信终端跨平台组件 Mars 正式开源！</a></a></li>
<li><a href="http://www.cocoachina.com/ios/20170425/19118.html">关于 iOS HTTP2.0 的一次学习实践</a></li>
<li><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a></li>
<li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></li>
<li><a href="https://github.com/RestKit/RestKit">RestKit</a></li>
<li><a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a></li>
<li><a href="https://github.com/square/retrofit">Retrofit</a></li>
<li><a href="https://github.com/square/okhttp">okhttp</a></li>
<li><a href="http://www.infoq.com/cn/articles/mogujie-app-chromium-network-layer/">蘑菇街App Chromium网络栈实践</a></li>
<li>iOS9.0+支持HTTP2</li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html">NSURLSession</a></li>
<li><a href="http://www.open-open.com/lib/view/open1478836390465.html">蘑菇街11.11：移动流量猛增，如何设计高并发多终端的无线网关</a></li>
<li><a href="http://blog.csdn.net/hguisu/article/details/7445768/"><a href="http://blog.csdn.net/hguisu/article/details/7445768">Linux的SOCKET编程详解</a></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android存储]]></title>
    <link href="https://jacoli.github.io/15480679782398.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782398.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="http://blog.csdn.net/amazing7/article/details/51437435">Android 数据存储五种方式使用与总结</a></li>
<li><a href="https://github.com/Xiaofei-it/AndroidDataStorage">AndroidDataStorage</a></li>
<li><a href="https://github.com/realm/realm-java">realm-java</a></li>
<li><a href="https://github.com/greenrobot/greenDAO">greenDAO</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS存储]]></title>
    <link href="https://jacoli.github.io/15480679782584.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782584.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">存储方式</h3>

<ul>
<li>NSUserDefault，可以存放Key-Value对形式的轻量数据。</li>
<li>NSKeyedArchiver，存储对象到二进制文件。</li>
<li>writeToFile，将NSString、NSArray、NSDictionary、NSData对象存储到文件。</li>
<li>CoreData.Framework，对象管理并支持对象持久。
<img src="http://upload-images.jianshu.io/upload_images/1824896-60432e4e99c8d3ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CoreData持久类型"/></li>
<li>Sqlite，轻量数据库</li>
<li>Keychain，钥匙串存储</li>
<li>NSUbiquitousKeyValueStore，存储数据到iCloud</li>
</ul>

<h3 id="toc_1">关于安全性</h3>

<ul>
<li>敏感数据不要明文存储</li>
<li>存放在Keychain，不越狱还是安全的</li>
<li>Safety is relative, choose a safer way.</li>
</ul>

<h3 id="toc_2">三方库</h3>

<ul>
<li><a href="https://github.com/aschuch/AwesomeCache">AwesomeCache</a></li>
<li><a href="https://github.com/ibireme/YYCache">YYCache</a>
基于Disk、Memory的缓存</li>
<li><a href="https://github.com/yuantiku/YTKKeyValueStore">YTKKeyValueStore</a>
基于Sqlite的健值对数据的存储</li>
<li><a href="https://github.com/radex/SwiftyUserDefaults">SwiftyUserDefaults</a></li>
<li><a href="https://github.com/ccgus/fmdb">FMDB</a></li>
<li><a href="https://github.com/supermarin/ObjectiveRecord">ObjectiveRecord</a>
CoreData的封装</li>
<li><a href="https://github.com/realm/realm-cocoa">realm</a>
Realm is a mobile database: a replacement for Core Data &amp; SQLite.</li>
<li><a href="https://github.com/square/Valet">Valet</a>
基于Keychain的数据存储，接口简洁易用，支持同一开发者下应用间数据共享，支持iCloud数据同步，通过TouchID或设备密码保护数据。</li>
<li><a href="https://github.com/kishikawakatsumi/UICKeyChainStore">UICKeyChainStore</a></li>
<li><a href="https://github.com/kishikawakatsumi/KeychainAccess">KeychainAccess</a></li>
<li><a href="https://github.com/ptoomey3/Keychain-Dumper">Keychain-Dumper</a>
Keychain is not safe.</li>
</ul>

<h3 id="toc_3">参考</h3>

<ul>
<li><a href="https://developer.apple.com/documentation/security/keychain_services">keychain_services</a></li>
<li><a href="https://developer.apple.com/documentation/foundation/nsubiquitouskeyvaluestore">NSUbiquitousKeyValueStore</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-20/">iOS应用程序安全(20)-本地数据存储及其安全性（NSUserDefaults, CoreData, Sqlite, Plist 文件）</a></li>
<li><a href="http://wufawei.com/2013/06/Keychain-is-not-safe/">Keychain is not safe</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记4]]></title>
    <link href="https://jacoli.github.io/15480679782285.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782285.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="http://www.cocoachina.com/ios/20170502/19152.html">iOS 10.3开始可以动态改变app图标</a></li>
<li><a href="http://www.cocoachina.com/ios/20170507/19201.html">浅谈iOS视频播放的N种解决方案</a></li>
<li><a href="http://www.cocoachina.com/programmer/20170505/19189.html">【React Native】从源码一步一步解析它的实现原理</a></li>
<li><a href="http://blog.jobbole.com/84903/">十分钟搞清字符集和字符编码</a></li>
<li><a href="http://pingguohe.net/2016/01/31/lazyscroll.html">iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a></li>
<li><a href="http://pingguohe.net/2016/12/20/Tangram-design-and-practice.html">页面动态化的基础 —— Tangram</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记2]]></title>
    <link href="https://jacoli.github.io/15480679782183.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782183.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">数据</h3>

<ul>
<li><a href="https://9to5mac.com/2017/01/05/ios-10-now-installed-on-76-of-active-devices-according-to-apples-stats/">iOS10 设备安装率超7成</a></li>
</ul>

<p>看了下自己app的友盟统计，还有6%的iOS 8.x设备。等iOS 11出来后，再考虑放弃iOS 8.x用户吧。</p>

<ul>
<li><a href="http://www.cocoachina.com/programmer/20170210/18665.html">TIOBE 2月编程语言排行榜，Swift和Objective-C语言分别排在12和19位</a></li>
</ul>

<p>OC稳住呀～</p>

<h3 id="toc_1">文章推荐（转）</h3>

<ul>
<li><a href="http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/">移动端图片格式调研</a></li>
</ul>

<p>最近看到<a href="https://github.com/airbnb/lottie-ios">Lottie</a>项目，一个iOS，Android和React Native库，可以实时渲染After Effects动画，并且允许本地app像静态资源那样轻松地使用动画。回过头又把这篇图片格式调研的文章看了一遍，哈。这篇文章把移动开发常用的几种静态、动态图片做了详细的比较。</p>

<ul>
<li><a href="https://blog.yeatse.com/2016/10/26/support-nsurlprotocol-in-wkwebview/">让 WKWebView 支持 NSURLProtocol</a></li>
</ul>

<p><code>WKWebView</code>不支持<code>NSURLProtocol</code>，导致基于<code>UIWebView＋NSURLProtocol</code>并做了一些深度优化的，很难一下子就迁移到<code>WKWebView</code>。<code>WKWebView</code>内部使用了<code>NSURLProtocol</code>，但没有对外开放，不知道出于什么考虑。这篇文章以比较hack的方式让<code>WKWebView</code>支持<code>NSURLProtocol</code>。</p>

<ul>
<li><a href="http://mp.weixin.qq.com/s/qRW_akbU3TSd0SxpF3iQmQ">DynamicCocoa：滴滴 iOS 动态化方案的诞生与起航</a></li>
</ul>

<p>另一种Native动态化的方案，在OC编译器上动手脚，将OC代码自动编译成可动态下发的JS代码。</p>

<ul>
<li><a href="http://www.jianshu.com/p/c1904fd8db06">Xcode8带来的新特性和坑</a></li>
</ul>

<p>有些特性需要配合ios 10设备使用，比如内存循环引用、DYLD_PRINT_STATISTICS（打印应用预加载时间）等。</p>

<p>在Scheme的Environment Variables添加DYLD_PRINT_STATISTICS＝YES，可以打印应用预加载时间。从打印出来的日志看，<code>dylib loading time</code>占用了不少时间，应该是跟加载的系统库和三方库有关。<br/>
<code>The loading of Apple system frameworks is highly optimized but loading your embedded frameworks can be expensive.</code>  当三方库不采用Framework形式打包，加载时间是少了不少。</p>

<pre><code class="language-text">// 三方库以Frameworks形式打包
Total pre-main time: 392.25 milliseconds (100.0%)
         dylib loading time: 336.73 milliseconds (85.8%)
        rebase/binding time:  10.88 milliseconds (2.7%)
            ObjC setup time:  15.91 milliseconds (4.0%)
           initializer time:  28.65 milliseconds (7.3%)
           slowest intializers :
             libSystem.B.dylib :   4.63 milliseconds (1.1%)
                  AFNetworking :  12.03 milliseconds (3.0%)
</code></pre>

<pre><code class="language-text">// 三方库以.a静态链接库形式链接
Total pre-main time:  93.71 milliseconds (100.0%)
         dylib loading time:  11.46 milliseconds (12.2%)
        rebase/binding time:  27.05 milliseconds (28.8%)
            ObjC setup time:  13.16 milliseconds (14.0%)
           initializer time:  41.94 milliseconds (44.7%)
           slowest intializers :
             libSystem.B.dylib :   5.47 milliseconds (5.8%)
   libBacktraceRecording.dylib :   4.48 milliseconds (4.7%)
                        Fanmei :  54.14 milliseconds (57.7%)　
</code></pre>

<h3 id="toc_2">项目</h3>

<ul>
<li><a href="https://github.com/airbnb/lottie-ios">Lottie</a></li>
</ul>

<p>After Effects动画的渲染引擎。</p>

<ul>
<li><a href="https://github.com/facebookincubator/Keyframes">Keyframes</a></li>
</ul>

<p>A library for converting Adobe AE shape based animations to a data format and playing it back on Android and iOS devices.</p>

<p>跟<a href="https://github.com/airbnb/lottie-ios">Lottie</a>类似，也是After Effects动画的渲染引擎。</p>

<ul>
<li><a href="https://github.com/Instagram/IGListKit">Instagram/IGListKit</a></li>
</ul>

<p>A data-driven UICollectionView framework for building fast and flexible lists.</p>

<ul>
<li><a href="https://github.com/Flipboard/FLEX">Flipboard/FLEX</a></li>
</ul>

<p>An in-app debugging and exploration tool for iOS</p>

<p>iOS设备调试工具，可以查看沙盒，抓包，查看视图信息等。</p>

<ul>
<li><a href="https://github.com/material-components/material-components-ios">material-components-ios</a></li>
</ul>

<p>仿android的meterial design风格的控件</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记3]]></title>
    <link href="https://jacoli.github.io/15480679782229.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782229.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">数据</h3>

<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578648&amp;idx=1&amp;sn=8fecce896bf881334507e7f3f3486c54&amp;chksm=84b3b79fb3c43e89c98ed2e7f60c3c59f00324f53fef012ed33cb8fc6b37e430e83a52dc5f68&amp;mpshare=1&amp;scene=1&amp;srcid=0216VUFfTaK8KjnNJHO0FXJ7#rd">2016 移动应用质量大数据报告</a></li>
</ul>

<p>主要是针对Crash和ANR的统计。</p>

<h3 id="toc_1">文章推荐</h3>

<ul>
<li><a href="http://www.cocoachina.com/ios/20170302/18815.html">移动端监控体系之技术原理剖析</a></li>
</ul>

<p>监控先于优化。没有数据支撑的优化，往往没有说服力，也很难衡量优化的效果如何。</p>

<ul>
<li><a href="http://blog.flight.dev.qunar.com/2016/11/10/ios-data-persistence-learn/#more">iOS 中数据持久化的几种方式</a></li>
</ul>

<p>大部分App或多或少都会涉及到存储（持久化或缓存）。<a href="https://github.com/ibireme/YYCache">ibireme/YYCache</a>，支持在硬盘持久化和在内存中缓存，从功能、性能和接口易用性上都不错，目前项目中也在用，推荐。</p>

<ul>
<li><p><a href="http://stormzhang.com/2016/09/27/mobile-dev-vs-front-end-web-dev/">移动开发 OR WEB 前端？</a></p></li>
<li><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程</a></p></li>
</ul>

<p>老文章了，视图布局机制在iOS、Android、Html CSS是相通的，可以互相借鉴。<a href="https://github.com/youngsoft/MyLinearLayout">youngsoft/MyLinearLayout</a>实现很多布局机制。</p>

<p>MyLinearLayout is equivalent to: UIStackView of iOS and LinearLayout of Android.</p>

<p>MyRelativeLayout is equivalent to: AutoLayout of iOS and RelativeLayout of Android.</p>

<p>MyFrameLayout is equivalent to: FrameLayout of Android.</p>

<p>MyTableLayout is equivalent to: TableLayout of Android and table of HTML.</p>

<p>MyFlowLayout is equivalent to: flexbox of CSS3.</p>

<p>MyFloatLayout is equivalent to: float of CSS.</p>

<p>借鉴Android的LinearLayout以及Html CSS的FlexBox，自己写了<a href="https://github.com/fanmeiwireless/FMLayouts">FMLayouts</a>，对iOS的布局机制做补充。</p>

<h3 id="toc_2">Android</h3>

<ul>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434652&amp;idx=1&amp;sn=da0ceda73595e5cb931abad7e51dbe62&amp;chksm=f12887e7c65f0ef1c086784e9ae77a7d9bd82daa6ba0302cebf307577ebd06fd3e0d9e37e87a&amp;mpshare=1&amp;scene=2&amp;srcid=0214hqv992PJvqbW94b0P2pv#rd">2017年,身为Android开发的你必须要掌握的热门开源框架</a></p></li>
<li><p><a href="http://stormzhang.com/2017/02/16/google-events/">你可能不知道 GOOGLE 最近的「小动作」</a></p></li>
</ul>

<h3 id="toc_3">项目</h3>

<ul>
<li><a href="https://github.com/SnapKit/SnapKit">SnapKit/SnapKit</a></li>
</ul>

<p><a href="https://github.com/SnapKit/Masonry">SnapKit/Masonry</a>的Swift版本</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS测试框架XCTest]]></title>
    <link href="https://jacoli.github.io/15480679782543.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782543.html</id>
    <content type="html"><![CDATA[
<ul>
<li>XCTest已基本满足单元测试和UI测试的需求，支持对同步流程、异步流程、性能的测试，UI测试代码的自动生成，代码测试覆盖率的统计等。</li>
<li>UI测试也还有不足的地方，例如录制生成的代码仍不够完善，无法直接访问目标APP的接口，无法修改边界条件，在单设备或单模拟器运行效率过低，每次重启目标App后只能运行一个Case。</li>
<li><a href="https://github.com/vsouza/awesome-ios#ui-testing">一些三方库</a></li>
<li><a href="https://github.com/linkedin/bluepill">Bluepill is a tool to run iOS tests in parallel using multiple simulators.</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/01-introduction.html">XCTest官方手册 </a></li>
<li><a href="http://www.tuicool.com/articles/ZJNzYbY">iOS单元测试和UI测试</a></li>
<li><a href="http://www.tuicool.com/articles/nyQBN3B">单元测试之旅--预见优秀</a></li>
<li><a href="http://www.tuicool.com/articles/fE3Uvqb">iOS UnitTest单元测试</a></li>
<li><a href="http://www.tuicool.com/articles/QfA73qy">Android单元测试的整理</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记1]]></title>
    <link href="https://jacoli.github.io/15480679782141.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782141.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">文章推荐</h3>

<ul>
<li><a href="http://www.infoq.com/cn/articles/2016-review-mobile">2016移动开发技术巡礼</a></li>
</ul>

<p>徐川大神对2016年移动技术发展的概述，以及对2017年的展望。总结了各种技术，热补丁、组件化、动态化、跨平台、直播、AR/VR等等。自己在项目实践中，也尝试了热补丁、动态化、组件化等技术，比较有体会。推荐他的博客<a href="http://mobilefrontier.github.io/">移动开发前线</a>，还是相当不错的。</p>

<ul>
<li><a href="http://pingguohe.net/2016/01/31/lazyscroll.html">苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a></li>
</ul>

<p>对于往往存在大量异构元素的app首页或集合页，该方案的思路还是可以借鉴下的。</p>

<ul>
<li><a href="http://www.jianshu.com/p/90a90bd13aac">WKWebView从入门到趟坑</a></li>
</ul>

<p>为满足大部分动态化需求，在App中内嵌一个WebView支持H5页，这是比较常见的做法。iOS上就UIWebView和WKWebView，WKWebView相比较UIWebView，性能更优，但也多了不少限制。目前自己项目中也是直接使用WKWebView，好在H5和Native的交互比较少，对WKWebView也没有做多少优化。</p>

<ul>
<li><a href="http://www.cocoachina.com/swift/20161221/18407.html">Swift 并行编程现状和展望 - async/await 和参与者模式</a></li>
</ul>

<p>异步编程，特别是多层嵌套的情况，即使用了GCD&amp;Block回调方式去写，代码仍会过于凌乱，可读性也大打折扣。我会通过以下两种方法去处理，将每个异步回调的处理逻辑封装在一个函数内，或将每个异步过程封装起来（即Future／Promise的做法）。无论哪种，也都会额外增加些成本，结合自己项目内的代码风格和使用成本再选择一个合适的。</p>

<ul>
<li><a href="http://www.cocoachina.com/programmer/20170122/18604.html">2017，我的iOS进阶规划</a></li>
</ul>

<p>知识点比较基础，罗列得比较多，可以结合项目多看看。</p>

<h3 id="toc_1">代码推荐</h3>

<ul>
<li><a href="https://github.com/vsouza/awesome-ios">vsouza/awesome-ios</a></li>
</ul>

<p>收集了大量的iOS开源项目、网页等等</p>

<ul>
<li><a href="http://www.jianshu.com/p/d75a9a8d13b5">33 个 2017 年必须了解的 iOS 开源库</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Alamofire源码分析]]></title>
    <link href="https://jacoli.github.io/15480679782353.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782353.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">概述</h3>

<ul>
<li><p><code>Alamofire</code>跟<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>的功能差不多，都是对URLSession的封装，对上层提供易用的网络请求接口。</p></li>
<li><p><code>Alamofire</code>和<a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>分别是Swift和OC的实现版本。</p></li>
<li><p>目前，这两个网络封装库的关注度和使用率非常高，代码质量也相当不错。本文想通过对<code>Alamofire</code>源码的简单分析，了解其基本框架和设计思路。</p></li>
<li><p>源码链接：<a href="https://github.com/Alamofire/Alamofire">Alamofire</a></p></li>
</ul>

<h3 id="toc_1">一个GET请求的源码分析</h3>

<ul>
<li>从最简单的Get请求入手，分析<code>Alamofire</code>的代码。一个请求流程，可以分为请求发送流程和请求响应流程，下文将从这两个流程展开分析。</li>
</ul>

<pre><code class="language-text">// Get请求的调用方式
Alamofire.request(&quot;https://httpbin.org/get&quot;).responseJSON { response in
    print(response.request)  // original URL request
    print(response.response) // HTTP URL response
    print(response.data)     // server data
    print(response.result)   // result of response serialization

    if let JSON = response.result.value {
        print(&quot;JSON: \(JSON)&quot;)
    }
}
</code></pre>

<h4 id="toc_2">请求发送流程</h4>

<ul>
<li><code>Alamofire.Swift</code>可以认为<code>Alamofire</code>一些对外接口的包装（Facade API）。
<code>Alamofire.request</code>实际上是调用了<code>SessionManager.request</code>。</li>
</ul>

<pre><code class="language-text">// 调用request方法
/// Creates a `DataRequest` using the default `SessionManager` to retrieve the contents of a URL based on the specified `urlRequest`.
@discardableResult
public func request(_ urlRequest: URLRequestConvertible) -&gt; DataRequest {
    return SessionManager.default.request(urlRequest)
}
</code></pre>

<ul>
<li>在<code>SessionManager.request</code>，<code>Request</code>被组装创建，并加到发送队列中，然后等待一系列的响应事件。而<code>SessionManager</code>主要职责是管理发送队列，组装请求消息，设置Session相关的配置，设置工作线程等。</li>
</ul>

<pre><code class="language-text">// 创建request对象，并开始发送
/// Creates a `DataRequest` to retrieve the contents of a URL based on the specified `urlRequest`.
    open func request(_ urlRequest: URLRequestConvertible) -&gt; DataRequest {
        var originalRequest: URLRequest?

        do {
            originalRequest = try urlRequest.asURLRequest()
            let originalTask = DataRequest.Requestable(urlRequest: originalRequest!)

            let task = try originalTask.task(session: session, adapter: adapter, queue: queue)
            let request = DataRequest(session: session, requestTask: .data(originalTask, task))

            delegate[task] = request

            if startRequestsImmediately { request.resume() }

            return request
        } catch {
            return request(originalRequest, failedWith: error)
        }
    }
</code></pre>

<ul>
<li>接着，通过<code>Request.responseJSON</code>设置JSON响应回调的处理方法。</li>
</ul>

<pre><code class="language-text">// 设置回调
/// Adds a handler to be called once the request has finished.
    @discardableResult
    public func responseJSON(
        queue: DispatchQueue? = nil,
        options: JSONSerialization.ReadingOptions = .allowFragments,
        completionHandler: @escaping (DataResponse&lt;Any&gt;) -&gt; Void)
        -&gt; Self
    {
        return response(
            queue: queue,
            responseSerializer: DataRequest.jsonResponseSerializer(options: options),
            completionHandler: completionHandler
        )
    }
</code></pre>

<ul>
<li><code>Request.responseJSON</code>实际上是调用<code>Request.response</code>，将回调添加到<code>Request.delegate.queue</code>，然后等待响应事件。</li>
</ul>

<pre><code class="language-text">    /// Adds a handler to be called once the request has finished.
    @discardableResult
    public func response&lt;T: DataResponseSerializerProtocol&gt;(
        queue: DispatchQueue? = nil,
        responseSerializer: T,
        completionHandler: @escaping (DataResponse&lt;T.SerializedObject&gt;) -&gt; Void)
        -&gt; Self
    {
        delegate.queue.addOperation {
            let result = responseSerializer.serializeResponse(
                self.request,
                self.response,
                self.delegate.data,
                self.delegate.error
            )

            var dataResponse = DataResponse&lt;T.SerializedObject&gt;(
                request: self.request,
                response: self.response,
                data: self.delegate.data,
                result: result,
                timeline: self.timeline
            )

            dataResponse.add(self.delegate.metrics)

            (queue ?? DispatchQueue.main).async { completionHandler(dataResponse) }
        }

        return self
    }

</code></pre>

<ul>
<li>至此，发送流程完成，接着就等待响应事件。</li>
</ul>

<h4 id="toc_3">请求响应流程</h4>

<ul>
<li><p>一个请求的响应事件会有多个，并按循序上报，例如以下几个主要事件，</p></li>
<li><p>HTTPS鉴权事件 <code>func urlSession(_ session: URLSession,task: URLSessionTask, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -&gt; Void)</code></p></li>
<li><p>收到Response响应头事件 <code>func urlSession(_ session: URLSession,dataTask: URLSessionDataTask, didReceive response: URLResponse, completionHandler: @escaping (URLSession.ResponseDisposition) -&gt; Void)</code></p></li>
<li><p>收到Response Body数据事件 <code>func urlSession(_ session: URLSession, dataTask: URLSessionDataTask, didReceive data: Data)</code></p></li>
<li><p>响应流程完成事件 <code>func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?)</code></p></li>
<li><p>本文以最后一个响应流程完成事件为例，梳理下整个响应流程。</p></li>
<li><p>首先，<code>SessionDelegate</code>会收到由<code>URLSession.delegate</code>上报的<code>urlSession:task:didCompleteWithError</code>，根据<code>task</code>找到<code>URLSessionTask</code>并通过其<code>delegate</code>上报事件给<code>TaskDelegate</code>。</p></li>
</ul>

<pre><code class="language-text">    /// Tells the delegate that the task finished transferring data.
    open func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {
        /// Executed after it is determined that the request is not going to be retried
        let completeTask: (URLSession, URLSessionTask, Error?) -&gt; Void = { [weak self] session, task, error in
            guard let strongSelf = self else { return }

            if let taskDidComplete = strongSelf.taskDidComplete {
                taskDidComplete(session, task, error)
            } else if let delegate = strongSelf[task]?.delegate {
                delegate.urlSession(session, task: task, didCompleteWithError: error)
            }

            NotificationCenter.default.post(
                name: Notification.Name.Task.DidComplete,
                object: strongSelf,
                userInfo: [Notification.Key.Task: task]
            )

            strongSelf[task] = nil
        }

        guard let request = self[task], let sessionManager = sessionManager else {
            completeTask(session, task, error)
            return
        }

        // Run all validations on the request before checking if an error occurred
        request.validations.forEach { $0() }

        // Determine whether an error has occurred
        var error: Error? = error

        if let taskDelegate = self[task]?.delegate, taskDelegate.error != nil {
            error = taskDelegate.error
        }

        /// If an error occurred and the retrier is set, asynchronously ask the retrier if the request
        /// should be retried. Otherwise, complete the task by notifying the task delegate.
        if let retrier = retrier, let error = error {
            retrier.should(sessionManager, retry: request, with: error) { [weak self] shouldRetry, timeDelay in
                guard shouldRetry else { completeTask(session, task, error) ; return }

                DispatchQueue.utility.after(timeDelay) { [weak self] in
                    guard let strongSelf = self else { return }

                    let retrySucceeded = strongSelf.sessionManager?.retry(request) ?? false

                    if retrySucceeded, let task = request.task {
                        strongSelf[task] = request
                        return
                    } else {
                        completeTask(session, task, error)
                    }
                }
            }
        } else {
            completeTask(session, task, error)
        }
    }
</code></pre>

<ul>
<li>接着，<code>TaskDelegate</code>收到该事件后，恢复queue队列，按循序执行其中的回调，如<code>ResponseJSON</code>。</li>
</ul>

<pre><code class="language-text">    @objc(URLSession:task:didCompleteWithError:)
    func urlSession(_ session: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {
        if let taskDidCompleteWithError = taskDidCompleteWithError {
            taskDidCompleteWithError(session, task, error)
        } else {
            if let error = error {
                if self.error == nil { self.error = error }

                if
                    let downloadDelegate = self as? DownloadTaskDelegate,
                    let resumeData = (error as NSError).userInfo[NSURLSessionDownloadTaskResumeData] as? Data
                {
                    downloadDelegate.resumeData = resumeData
                }
            }

            // queue队列中的operaion开始按循序执行，回调到上层。
            queue.isSuspended = false
        }
    }
</code></pre>

<h3 id="toc_4">其他模块</h3>

<ul>
<li><p>除了发送，响应相关的代码，<code>Alamofire</code>还有许多其他模块。例如，</p></li>
<li><p><code>NetworkReachabilityManager</code>管理网络状态。</p></li>
<li><p><code>ParameterEncoding</code> 入参编解码方式。</p></li>
<li><p><code>ResponseSerialization</code> 响应的反序列化方式。</p></li>
<li><p><code>ServerTrustPolicy</code> HTTPS的鉴权</p></li>
<li><p>等等。</p></li>
</ul>

<h3 id="toc_5">总结</h3>

<ul>
<li>分析得比较简单，抱砖引玉。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[* 经过一个月多的努力，app终于成型了，欣喜，期待上线后效果，在这里稍作技术上的总结和展望。]]></title>
    <link href="https://jacoli.github.io/15480679782099.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782099.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p>虽然是首版，功能不多，但麻雀虽小五脏俱全，详情、评论、登录、分享、支付、推送、地图、数据统计、错误统计、Hotfix等基础功能也都要有。</p></li>
<li><p>分层，从上到下，将整体框架划分为业务层，基础服务层，容器运行层，和三方库层。</p></li>
<li><p>组件划分，业务组件化、服务组件化、基础功能组件化</p></li>
<li><p>考虑前面几个版本的快速开发迭代，只做了逻辑上的分层和组件划分，代码仍是在同一个工程内，没有做Bundle化。</p></li>
<li><p>应用整体框架如下，具体细节暂不展开了，后续有时间再细化总结</p></li>
</ul>

<p><img src="http://upload-images.jianshu.io/upload_images/1824896-75b18507cdc838ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="应用整体框架"/><br/>
<img src="http://upload-images.jianshu.io/upload_images/1824896-c637a74c5142cf37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="APP闪屏页"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS学习导图]]></title>
    <link href="https://jacoli.github.io/15479057717732.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717732.html</id>
    <content type="html"><![CDATA[
<p>本文简单罗列了下iOS相关的点。</p>

<h3 id="toc_0">基础</h3>

<p><img src="media/15479057717732/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80.png" alt="iOS应用开发基础"/></p>

<ul>
<li>Runloop</li>
</ul>

<p><a href="http://blog.ibireme.com/2015/05/18/runloop/">深入理解RunLoop</a></p>

<ul>
<li>多线程&amp;同步</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/ios-multi-threaded-programming-a-multi-threaded-programming.html">iOS多线程编程指南</a></p>

<ul>
<li>Core Animation</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/coreanimation-programming-guide-summary.html">CoreAnimation编程指南</a></p>

<p><a href="http://www.cnblogs.com/xdream86/p/3250782.html">Core Animation编程指南</a><br/>
<a href="http://www.cocoachina.com/ios/20150104/10814.html">iOS-Core-Animation-Advanced-Techniques</a></p>

<ul>
<li>Block</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/block%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80.html">Block介绍</a></p>

<ul>
<li>GCD</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/grand-central-dispatch-basic-1.html">GCD入门</a></p>

<ul>
<li>Core Foundation</li>
</ul>

<p><a href="http://opensource.apple.com/tarballs/CF/">Core Foundation源码</a></p>

<h3 id="toc_1">应用优化</h3>

<ul>
<li><p><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/">iOS 保持界面流畅的技巧</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20150429/11712.html">WWDC心得与延伸:iOS图形性能</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20151203/14549.html">iOS 事件处理机制与图像渲染过程</a></p></li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207890859&amp;idx=1&amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;scene=1&amp;srcid=1119D98cPepPAys5UJjzKkFU&amp;key=d72a47206eca0ea99e5bfedd27c4e1979bafb09babd40343f279933377d574eeac88cdf63260b257d9bf187a90b30d1b&amp;ascene=0&amp;uin=NDEzMTA2OTc1&amp;devicetype=iMac+MacBookPro11%2C2+OSX+OSX+10.11+build(15A284)&amp;version=11020201&amp;pass_ticket=WqTD03t23%2Fz4yjGdIgJ7hHJdRAUd2Xh4DPQpswxoclHSqzbaxr%2B%2F%2B16u%2Fg0PXgMQ">微信iOS卡顿监控系统</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Push相关的资料]]></title>
    <link href="https://jacoli.github.io/15479057717825.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717825.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p>苹果官方的APNS，支持App不同状态下（前台、后台、未启动等）的消息推送。</p></li>
<li><p>另外个方案是，App和应用服务间维护一个长链接，应用服务通过心跳感知App状态。当App为在线状态时，应用服务可以通过该长链接推送消息。一般跟APNS配合使用。</p></li>
<li><p>自己的项目中使用的是友盟推送。</p></li>
<li><p>在Push消息中设置自定义参数，App在<code>- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</code>收到消息后解析参数并做相应逻辑（如跳转到相应页面等）</p></li>
</ul>

<pre><code class="language-text">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    NSLog(@&quot;didRegisterForRemoteNotificationsWithDeviceToken&quot;);
    
    // 注册用户登录登出监听
    [self handleRemoteNotificationDidRegistered];
}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
    NSLog(@&quot;didFailToRegisterForRemoteNotificationsWithError&quot;);
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    NSLog(@&quot;didReceiveRemoteNotification&quot;);
    
    [UMessage didReceiveRemoteNotification:userInfo];
    
    NSString *jsonString = [userInfo objectForKey:@&quot;custom&quot;];
    NSData *jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData
                                                        options:NSJSONReadingMutableContainers
                                                          error:nil];
    if (dic==nil || [dic isEqual:[NSNull null]]) {
        return;
    }

    [self handleRemoteNotification:dic];
}
</code></pre>

<h3 id="toc_0">其他一些资料</h3>

<ul>
<li><a href="http://www.tuicool.com/articles/Y77Ffe">一步一步实现iOS应用PUSH功能 - 咪咕咪咕</a></li>
<li><a href="http://blog.csdn.net/daydreamingboy/article/details/7977098">iOS上简单推送通知（Push Notification）的实现</a></li>
<li><a href="http://blog.csdn.net/c101012221/article/details/34433425">十大豪门推送sdk，哪个更适合你</a></li>
<li><a href="http://www.getui.com/">个推</a></li>
<li><a href="http://www.qcloud.com/product/XGPush.html">腾讯信鸽</a></li>
<li><a href="http://mobile.umeng.com/push?spm=0.0.0.0.pphrqW">友盟U-Push</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
