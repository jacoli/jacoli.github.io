<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李传格的博客]]></title>
  <link href="https://jacoli.github.io/atom.xml" rel="self"/>
  <link href="https://jacoli.github.io/"/>
  <updated>2019-01-21T15:55:49+08:00</updated>
  <id>https://jacoli.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[iOS学习导图]]></title>
    <link href="https://jacoli.github.io/15479057717732.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717732.html</id>
    <content type="html"><![CDATA[
<p>本文简单罗列了下iOS相关的点。</p>

<h3 id="toc_0">基础</h3>

<p><img src="media/15479057717732/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80.png" alt="iOS应用开发基础"/></p>

<ul>
<li>Runloop</li>
</ul>

<p><a href="http://blog.ibireme.com/2015/05/18/runloop/">深入理解RunLoop</a></p>

<ul>
<li>多线程&amp;同步</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/ios-multi-threaded-programming-a-multi-threaded-programming.html">iOS多线程编程指南</a></p>

<ul>
<li>Core Animation</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/coreanimation-programming-guide-summary.html">CoreAnimation编程指南</a></p>

<p><a href="http://www.cnblogs.com/xdream86/p/3250782.html">Core Animation编程指南</a><br/>
<a href="http://www.cocoachina.com/ios/20150104/10814.html">iOS-Core-Animation-Advanced-Techniques</a></p>

<ul>
<li>Block</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/block%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80.html">Block介绍</a></p>

<ul>
<li>GCD</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/grand-central-dispatch-basic-1.html">GCD入门</a></p>

<ul>
<li>Core Foundation</li>
</ul>

<p><a href="http://opensource.apple.com/tarballs/CF/">Core Foundation源码</a></p>

<h3 id="toc_1">应用优化</h3>

<ul>
<li><p><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/">iOS 保持界面流畅的技巧</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20150429/11712.html">WWDC心得与延伸:iOS图形性能</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20151203/14549.html">iOS 事件处理机制与图像渲染过程</a></p></li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207890859&amp;idx=1&amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;scene=1&amp;srcid=1119D98cPepPAys5UJjzKkFU&amp;key=d72a47206eca0ea99e5bfedd27c4e1979bafb09babd40343f279933377d574eeac88cdf63260b257d9bf187a90b30d1b&amp;ascene=0&amp;uin=NDEzMTA2OTc1&amp;devicetype=iMac+MacBookPro11%2C2+OSX+OSX+10.11+build(15A284)&amp;version=11020201&amp;pass_ticket=WqTD03t23%2Fz4yjGdIgJ7hHJdRAUd2Xh4DPQpswxoclHSqzbaxr%2B%2F%2B16u%2Fg0PXgMQ">微信iOS卡顿监控系统</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动安全]]></title>
    <link href="https://jacoli.github.io/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">安全检查项</h3>

<ul>
<li>移动App上关键数据（密码、个人信息等）在存储、传输等各个阶段需要做一定的安全保护。下图罗列了常见的检查项。
<img src="media/15479057717084/app_security_checks.png" alt="app_security_checks"/></li>
</ul>

<h3 id="toc_1">传输安全</h3>

<ul>
<li><p>保密性，消息是加密的，内容没有泄露，可以用对称加密算法进行加解密，如AES256。</p></li>
<li><p>完整性，消息是完整的，内容没有被篡改，对消息做哈希得到摘要，作为消息的签名。哈希算法有SHA256等，MD5、SHA1已经不太安全，尽量用SHA256等相对安全的算法。</p></li>
<li><p>真实性，消息是可靠的，内容来自受信的来源，验证来源的数字证书是否可靠。</p></li>
</ul>

<h3 id="toc_2">常见工具</h3>

<ul>
<li><p>class-dump-z<br/>
一个跨平台的 Objective-C 接口提取器,用于分析 iPhoneOS 可执行文件中私有的 API。需 通过 Cydia 安装。</p></li>
<li><p>darwin cc tools (otools) 一个开源的苹果程序编译和连接器。需通过 Cydia 安装。</p></li>
<li><p>HTTP代理抓包工具(Fiddler)</p></li>
<li><p>Plist文件查看器(plistEditor) </p></li>
<li><p>iOS内存修改工具(iGameGuard) </p></li>
<li><p>内购破解工具(LocalIAPStore、iAPFree) </p></li>
<li><p>keychain-dumper<br/>
该工具可以读取已越狱 IOS 设备中的 keychain。需通过 Cydia 安装。 </p></li>
<li><p>Link Identity Editor (ldid)<br/>
该工具可以协助测试人员修改 Mach-O 二进制文件的签名信息。需通过 Cydia 安装。 </p></li>
<li><p>OpenSSH<br/>
OpenSSH 是 Linux 下常用的服务,装上后设备可充当 SSH 服务端。需通过 Cydia 安装。 </p></li>
<li><p>Snoop-it<br/>
IOS APP 安全评估工具。可对 APP 进行静态、动态分析。需通过 Cydia 安装。</p></li>
</ul>

<h3 id="toc_3">相关博文</h3>

<ul>
<li><a href="http://security.ios-wiki.com/">ios-security</a></li>
<li><a href="http://drops.wooyun.org/papers/345">在线支付逻辑漏洞总结</a></li>
<li><a href="https://program-think.blogspot.com/2013/02/file-integrity-check.html?utm_source=tuicool&amp;utm_medium=referral">扫盲文件完整性校验——关于散列值和数字签名</a></li>
<li><a href="https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html">数字证书及 CA 的扫盲介绍</a></li>
<li><a href="http://www.techug.com/https-ssl-tls">https-ssl-tls</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动三方应用分享]]></title>
    <link href="https://jacoli.github.io/15479057717149.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717149.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">iOS原生分享控件</h3>

<pre><code class="language-text">    NSString *textToShare = @&quot;要分享的文本内容&quot;;
    UIImage *imageToShare = [UIImage imageNamed:@&quot;shop&quot;];
    NSURL *urlToShare = [NSURL URLWithString:@&quot;http://blog.csdn.net/hitwhylz&quot;];
    NSArray *activityItems = @[textToShare, imageToShare, urlToShare];
    
    UIActivityViewController *vc = [[UIActivityViewController alloc]initWithActivityItems:activityItems applicationActivities:nil];
    [self presentViewController:vc animated:YES completion:nil];
</code></pre>

<h3 id="toc_1">三方开放平台</h3>

<ul>
<li>新浪微博 <a href="http://open.weibo.com">http://open.weibo.com</a></li>
<li>腾讯微博 <a href="http://dev.t.qq.com">http://dev.t.qq.com</a></li>
<li>QQ空间，朋友网 <a href="http://connect.qq.com/intro/login/">http://connect.qq.com/intro/login/</a></li>
<li>QQ分享（QQ好友，QQ群等）<a href="http://mobile.qq.com/api/">http://mobile.qq.com/api/</a></li>
<li>豆瓣社区 <a href="http://developers.douban.com">http://developers.douban.com</a></li>
<li>人人网 <a href="http://dev.renren.com">http://dev.renren.com</a></li>
<li>微信好友 微信朋友圈 <a href="http://open.weixin.qq.com">http://open.weixin.qq.com</a></li>
<li><a href="http://mobile.umeng.com/social?spm=0.0.0.0.lW5N4c">友盟U-Share</a></li>
<li>用过友盟Share，但是遇到友盟ShareSDK中使用的微信SDK版本与官方不同步的问题，后来放弃了友盟ShareSDK，全部采用原生官方SDK，如微信（好友、朋友圈）、QQ、微博，在国内，这三个分享渠道已经能覆盖80%了。</li>
</ul>

<h3 id="toc_2">URL Schemes</h3>

<ul>
<li>iOS应用间可以通过<code>URL Schemes</code>解决相互通信的问题。</li>
<li>DemoA通过<code>openURL</code>唤起DemoB，并带上参数。</li>
</ul>

<pre><code class="language-text">DemoA

[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;demob://page?sourcescheme=demoa&quot;]];
</code></pre>

<ul>
<li>DemoB收到并解析参数并作逻辑处理，然后同样通过<code>openURL</code>返回到DemoA，并带上参数。</li>
</ul>

<pre><code class="language-text">DemoB

- (BOOL)handleUrl:(NSURL *)url {
    NSArray *querys = [url.query componentsSeparatedByString:@&quot;&amp;&quot;];
    
    NSMutableDictionary *queryDict = [[NSMutableDictionary alloc] init];
    for (NSString *q in querys) {
        NSArray *kv = [q componentsSeparatedByString:@&quot;=&quot;];
        if (kv.count == 2) {
            queryDict[kv[0]] = kv[1];
        }
    }
    
    NSString *returnScheme = queryDict[@&quot;sourcescheme&quot;];
    
    UIAlertController *vc = [UIAlertController alertControllerWithTitle:@&quot;url&quot;
                                                                message:url.absoluteString
                                                         preferredStyle:UIAlertControllerStyleAlert];
    [vc addAction:[UIAlertAction actionWithTitle:@&quot;返回原应用&quot;
                                           style:UIAlertActionStyleDefault
                                         handler:^(UIAlertAction * _Nonnull action) {
                                             [[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@&quot;%@://&quot;, returnScheme]]];
                                         }]];
    
    [vc addAction:[UIAlertAction actionWithTitle:@&quot;留在当前应用&quot;
                                           style:UIAlertActionStyleCancel
                                         handler:^(UIAlertAction * _Nonnull action) {
                                         }]];
    
    [self.window.rootViewController presentViewController:vc animated:YES completion:nil];
    
    return YES;
}

- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url NS_DEPRECATED_IOS(2_0, 9_0, &quot;Please use application:openURL:options:&quot;) __TVOS_PROHIBITED {
    return [self handleUrl:url];
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(id)annotation NS_DEPRECATED_IOS(4_2, 9_0, &quot;Please use application:openURL:options:&quot;) __TVOS_PROHIBITED {
    return [self handleUrl:url];
}

- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;NSString*, id&gt; *)options NS_AVAILABLE_IOS(9_0) {
    return [self handleUrl:url];

}
</code></pre>

<p><img src="media/15479057717149/urlschemedemo.png" alt="urlschemedemo"/></p>

<p><img src="media/15479057717149/iosappsinteraction.png" alt="iosappsinteraction"/></p>

<h3 id="toc_3">三方分享或认证</h3>

<ul>
<li>三方应用分享或认证都会用到<code>URL Schemes</code>流程，实际过程和参数会更复杂点，还需要考虑安全性。</li>
<li><p>如微信三方登录认证，除了三方应用通过URL Scheme跳转微信拿到code，再通过https请求微信后台拿到access_token，后续用https带上access_token可以请求各种资源。<br/>
<img src="media/15479057717149/weixinlogin.png" alt="weixinlogin"/></p></li>
<li><p>三方分享则是通过<code>URL Schemes</code>带上不同格式的数据（文本、图片、链接等）。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模式和架构]]></title>
    <link href="https://jacoli.github.io/15479057717214.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717214.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">编程模式</h3>

<ul>
<li>函数式编程 vs 面向对象编程</li>
<li>响应式编程 vs 命令式编程</li>
<li>promise</li>
</ul>

<h3 id="toc_1">架构、框架、设计模式：</h3>

<ul>
<li>1、架构属于顶层的设计，划分软件或解决方案的整体结构，倾向于抽象，常见的有分层架构、事件驱动架构、微内核架构、微服务架构等。</li>
<li>2、框架类似于提供工具库或类库，倾向于实现。</li>
<li>3、设计模式应该是更细力度的代码层级的复用、可维护性、可扩展性的设计。</li>
</ul>

<h3 id="toc_2">设计模式：</h3>

<ul>
<li>1、基于某种具体场景，代码组织结构或交互行为的设计方法，使得代码更易于复用、维护、扩展。</li>
<li>2、基本的6个原则：开闭原则、里氏替换原则、依赖倒置原则、接口隔离原则、单一职责原则、最少知识原则。</li>
<li>3、创建型模式：工厂方法、抽象工厂、原型、单例、builder</li>
<li>4、结构型:适配器、组合、桥接、decorator、facade、享元、proxy</li>
<li>5、行为型:解释器、模版方法、责任链、命令、迭代器、中介者、memento、观察者、状态、策略、访问者等。</li>
</ul>

<h3 id="toc_3">相关文章</h3>

<p><a href="http://www.cnblogs.com/beijiguangyong/archive/2010/11/15/2302807.html#_Toc281750445">23种设计模式</a></p>

<p><a href="http://www.cnblogs.com/hegezhou_hot/archive/2010/10/08/1846200.html">系统架构师</a></p>

<p>前篇</p>

<pre><code class="language-text">  1、系统架构师-基础到企业应用架构系列之--开卷有益
  2、系统架构师-基础到企业应用架构-系统建模[上篇]
  3、系统架构师-基础到企业应用架构-系统建模[中篇](上)
  4、系统架构师-基础到企业应用架构-系统建模[中篇](下)
  5、系统架构师-基础到企业应用架构-系统建模[下篇]
  6、系统架构师-基础到企业应用架构-系统设计规范与原则[上篇]
  7、系统架构师-基础到企业应用架构-系统设计规范与原则[下篇]
  8、系统架构师-基础到企业应用架构-设计模式[上篇]
  9、系统架构师-基础到企业应用架构-设计模式[中篇]
  10、系统架构师-基础到企业应用架构-设计模式[下篇]
</code></pre>

<p>中篇</p>

<pre><code class="language-text">  11、系统架构师-基础到企业应用架构-企业应用架构
  12、系统架构师-基础到企业应用架构-分层[上篇]
  13、系统架构师-基础到企业应用架构-分层[中篇]
  14、系统架构师-基础到企业应用架构-分层[下篇]
  15、系统架构师-基础到企业应用架构-表现层
  16、系统架构师-基础到企业应用架构-服务层
  17、系统架构师-基础到企业应用架构-业务逻辑层
  18、系统架构师-基础到企业应用架构-数据访问层
  19、系统架构师-基础到企业应用架构-组件服务
  20、系统架构师-基础到企业应用架构-安全机制
</code></pre>

<p>后篇</p>

<pre><code class="language-text">  21、单机应用、客户端/服务器、多服务、企业数据总线全解析
  22、系统架构师-基础到企业应用架构-单机应用(实例及demo)
  23、系统架构师-基础到企业应用架构-客户端/服务器(实例及demo)
  24、系统架构师-基础到企业应用架构-多服务(实例及demo)
  25、系统架构师-基础到企业应用架构-企业数据总线(实例及demo)
  26、系统架构师-基础到企业应用架构-性能优化(架构瓶颈)
  27、系统架构师-基础到企业应用架构-完整的架构方案实例[上篇]
  28、系统架构师-基础到企业应用架构-完整的架构方案实例[中篇]
  29、系统架构师-基础到企业应用架构-完整的架构方案实例[下篇]
  30、系统架构师-基础到企业应用架构-总结及后续
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS设备ID]]></title>
    <link href="https://jacoli.github.io/15479057717614.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717614.html</id>
    <content type="html"><![CDATA[
<p>NSString *identifierForVendor = [[UIDevice currentDevice].identifierForVendor UUIDString]; <br/>
NSString *identifierForAdvertising = [[ASIdentifierManager sharedManager].advertisingIdentifier UUIDString]; </p>

<p>设备标识<br/>
identifierForVendor，<br/>
app在一个device上的标识，从ios6开始支持。一个设备上相同vendor的app获取到相同值，不同vendor则不同值。<br/>
app如果从App Store直接下载，该值由App Store分配，如果app是企业版、Ad Hoc、或开发版，则该值由bundle identifier计算。<br/>
设备上删除所有该Vendor的apps后，下次再安装app，值会发生变化。<br/>
If the value is nil, wait and get the value again later. This happens, for example, after the device has been restarted but before the user has unlocked the device.</p>

<p>advertisingIdentifier<br/>
一个设备上所有app获取到都是相同的值。<br/>
If the value is nil, wait and get the value again later. This happens, for example, after the device has been restarted but before the user has unlocked the device.</p>

<h3 id="toc_0">iOS获取设备唯一标识的各种方法？IDFA、IDFV、UDID分别是什么含义？</h3>

<p>[摘要：1、UDID (Unique Device Identifier) UDID的齐称是Unique Device Identifier，望文生义，它便是苹果IOS装备的独一辨认码，它由40个字符的字母战数字构成。正在良多须要限定] </p>

<p>一、UDID (Unique Device Identifier)</p>

<pre><code class="language-text">UDID的全称是Unique Device Identifier，顾名思义，它就是苹果IOS设备的唯一识别码，它由40个字符的字母和数字组成。在很多需要限制一台设备一个账号的应用中经常会用到。在iOS5中可以获取到设备的UDID，后来被苹果禁止了。
</code></pre>

<p>二、UUID（Universally Unique Identifier）</p>

<pre><code class="language-text">UUID是Universally Unique Identifier的缩写，中文意思是通用唯一识别码。它是让分布式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。这样，每个人都可以建立不与其它人冲突的 UUID。在此情况下，就不需考虑数据库建立时的名称重复问题。苹果公司建议使用UUID为应用生成唯一标识字符串。
开发者可以在应用第一次启动时调用一 次，然后将该串存储起来，替代UDID来使用。但是，如果用户删除该应用再次安装时，又会生成新的字符串，所以不能保证唯一识别该设备。使用UUID，就要考虑应用被删除后再重新安装时的处理。一个解决的办法是：UUID一般只生成一次，保存在iOS系统里面，如果应用删除了，重装应用之后它的UUID还是一样的，除非系统重置 。但是不能保证在以后的系统升级后还能用（如果系统保存了该信息就能用）。
</code></pre>

<p>三、MAC Address</p>

<p>用来表示互联网上每一个站点的标识符，采用十六进制数表示，共六个字节（48位）。其中，前三个字节是由IEEE的注册管理机构 RA负责给不同厂家分配的代码(高位24位)，也称为“编制上唯一的标识符” （Organizationally Unique Identifier)，后三个字节(低位24位)由各厂家自行指派给生产的适配器接口，称为扩展标识符（唯一性）。</p>

<p>MAC地址在网络上用来区分设备的唯一性，接入网络的设备都有一个MAC地址，他们肯定都是不同的，是唯一的。一部iPhone上可能有多个MAC地址，包括WIFI的、SIM的等，但是iTouch和iPad上就有一个WIFI的，因此只需获取WIFI的MAC地址就好了，也就是en0的地址。<br/>
MAC地址就如同我们身份证上的身份证号码，具有全球唯一性。这样就可以非常好的标识设备唯一性，类似与苹果设备的UDID号，通常的用途有：1）用于一些统计与分析目的，利用用户的操作习惯和数据更好的规划产品；2）作为用户ID来唯一识别用户，可以用游客身份使用app又能在服务器端保存相应的信息，省去用户名、密码等注册过程。<br/>
使用Mac地址生成设备的唯一标识主要分三种：<br/>
1、直接使用“MAC Address” <br/>
2、使用“MD5(MAC Address)”<br/>
3、使用“MD5(Mac Address+bundle_id)”获得“机器＋应用”的唯一标识（bundle_id 是应用的唯一标识）<br/>
在iOS7之后，如果请求Mac地址都会返回一个固定值。<br/>
四、IDFA（identifierForIdentifier）</p>

<p>广告标示符，适用于对外：例如广告推广，换量等跨应用的用户追踪等。</p>

<pre><code class="language-text">是iOS 6中另外一个新的方法，提供了一个方法advertisingIdentifier，通过调用该方法会返回一个NSUUID实例，最后可以获得一个UUID，由系统存储着的。不过即使这是由系统存储的，但是有几种情况下，会重新生成广告标示符。如果用户完全重置系统（(设置程序 -&gt; 通用 -&gt; 还原 -&gt; 还原位置与隐私) ，这个广告标示符会重新生成。另外如果用户明确的还原广告(设置程序-&gt; 通用 -&gt; 关于本机 -&gt; 广告 -&gt; 还原广告标示符) ，那么广告标示符也会重新生成。关于广告标示符的还原，有一点需要注意：如果程序在后台运行，此时用户“还原广告标示符”，然后再回到程序中，此时获取广 告标示符并不会立即获得还原后的标示符。必须要终止程序，然后再重新启动程序，才能获得还原后的广告标示符。
</code></pre>

<p>在同一个设备上的所有App都会取到相同的值，是苹果专门给各广告提供商用来追踪用户而设的，用户可以在 设置|隐私|广告追踪 里重置此id的值，或限制此id的使用，故此id有可能会取不到值，但好在Apple默认是允许追踪的，而且一般用户都不知道有这么个设置，所以基本上用来监测推广效果，是戳戳有余了。</p>

<p>注意：由于idfa会出现取不到的情况，故绝不可以作为业务分析的主id，来识别用户。</p>

<p>代码：</p>

<h1 id="toc_1">import <AdSupport/AdSupport.h></h1>

<p>NSString *adId = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];<br/>
五、IDFV（identifierForVendor）</p>

<p>Vindor标示符，适用于对内：例如分析用户在应用内的行为等。</p>

<p>是给Vendor标识用户用的，每个设备在所属同一个Vender的应用里，都有相同的值。其中的Vender是指应用提供商，但准确点说，是通过BundleID的DNS反转的前两部分进行匹配，如果相同就是同一个Vender，例如对于com.somecompany.appone,com.somecompany.apptwo 这两个BundleID来说，就属于同一个Vender，共享同一个idfv的值。和idfa不同的是，idfv的值是一定能取到的，所以非常适合于作为内部用户行为分析的主id，来标识用户，替代OpenUDID。</p>

<p>注意：如果用户将属于此Vender的所有App卸载，则idfv的值会被重置，即再重装此Vender的App，idfv的值和之前不同。</p>

<p>代码：</p>

<p>NSString *idfv = [[[UIDevice currentDevice] identifierForVendor] UUIDString];<br/>
六、OPEN UDID</p>

<pre><code class="language-text">每台iOS设备的OpenUDID是通过第一个带有OpenUDID SDK包的App生成，如果你完全删除全部带有OpenUDID SDK包的App（比如恢复系统等），那么OpenUDID会重新生成，而且和之前的值会不同，相当于新设备；
优点是没有用到MAC地址；不同设备能够获取各自唯一的识别码，保证了唯一性，可以用于以往UDID的相关用途；从代码分析OpenUDID的获取，识别码获取方便并且保存谨慎。缺点是当将设备上所有使用了OpenUDID方案的应用程序删除，且设备关机重启，xcode彻底清除并重启，重装应用程序去获取OpenUDID，此时OpenUDID变化，与之前不一样了，所有OpenUDID应用卸载后，由UIPasteboard保存的数据即被清除，重装故会重新获取新的OpenUDID。
</code></pre>

<p>那么当因为用户干预或者恶意程序，致使UIPasteboard数据清除，从而导致OpenUDID被删除，重装也会获取新的OpenUDID。</p>

<pre><code class="language-text">OpenUDID生成唯一识别码的代码： 
</code></pre>

<p>unsigned char result[16];<br/><br/>
        const charchar *cStr = [[[NSProcessInfo processInfo] globallyUniqueString] UTF8String];<br/><br/>
        CC_MD5( cStr, strlen(cStr), result );<br/><br/>
        _openUDID = [NSString stringWithFormat:<br/><br/>
                     @&quot;%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%08x&quot;,<br/><br/>
                     result[0], result[1], result[2], result[3],<br/><br/>
                     result[4], result[5], result[6], result[7],<br/><br/>
                     result[8], result[9], result[10], result[11],<br/><br/>
                     result[12], result[13], result[14], result[15],<br/><br/>
                     arc4random() % 4294967295]; </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS程序生命周期]]></title>
    <link href="https://jacoli.github.io/15479057717671.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717671.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">程序的生命周期</h3>

<ul>
<li><p>程序的生命周期，包含非运行、非激活、激活、后台、挂起五个状态</p></li>
<li><p>状态间切换都会有响应的回调和通知</p></li>
<li><p>程序挂起状态将接收不到Terminate通知，因此进入后台，能够处理程序随时被结束。 applicationWillTerminate:—Lets you know that your app is being terminated. This method is not called if your app is suspended.</p></li>
</ul>

<h3 id="toc_1">程序如何在后台运行</h3>

<ul>
<li>1、短时间运行，进入后台后，可以调用beginBackgroundTaskWithName方法启动有限时间的任务。</li>
<li>2、NSURLSession支持后台下载。</li>
<li>3、长时间运行，支持以下几种模式，音频及视频（airplay）播放、更新定位、VOIP、下载Newsstand、外部附件、蓝牙、push，在info.plist添加相应配置，代码中引入相应的framework并调用相应接口。</li>
<li>调用application:performFetchWithCompletionHandler: 在后台获取少量数据。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC Runtime(6)之Load&Initialize]]></title>
    <link href="https://jacoli.github.io/15479057717263.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717263.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">+load</h3>

<ul>
<li><code>+load</code>方法只会被执行一次，且是在程序加载阶段，这时运行环境并不完备。</li>
<li>不同类或类别的<code>+load</code>方法会按一定顺序被执行。</li>
</ul>

<pre><code class="language-text">1、依赖库的`+load`。
2、当前库`+load`，`class`的`+load`优先于`category`，父`class`优先于子`class`。
3、当前库的`All C++ static initializers and C/C++ __attribute__(constructor) functions`。
4、被依赖库的`+load`。

</code></pre>

<ul>
<li><p>在<code>+load</code>方法中可以安全地发送消息给当前库内其他类的消息，虽然这些类的<code>+load</code>可能还没有执行过。</p></li>
<li><p>从源码中，也可以看出<code>class</code>的<code>+load</code>优先于<code>category</code>，父<code>class</code>优先于子<code>class</code>。</p></li>
</ul>

<pre><code class="language-text">void prepare_load_methods(const headerType *mhdr)
{
    size_t count, i;

    runtimeLock.assertWriting();

    classref_t *classlist = 
        _getObjc2NonlazyClassList(mhdr, &amp;count);
    for (i = 0; i &lt; count; i++) {
        schedule_class_load(remapClass(classlist[i]));
    }

    category_t **categorylist = _getObjc2NonlazyCategoryList(mhdr, &amp;count);
    for (i = 0; i &lt; count; i++) {
        category_t *cat = categorylist[i];
        Class cls = remapClass(cat-&gt;cls);
        if (!cls) continue;  // category for ignored weak-linked class
        realizeClass(cls);
        assert(cls-&gt;ISA()-&gt;isRealized());
        add_category_to_loadable_list(cat);
    }
}
</code></pre>

<pre><code class="language-text">static void schedule_class_load(Class cls)
{
    if (!cls) return;
    assert(cls-&gt;isRealized());  // _read_images should realize

    if (cls-&gt;data()-&gt;flags &amp; RW_LOADED) return;

    // Ensure superclass-first ordering
    schedule_class_load(cls-&gt;superclass);

    add_class_to_loadable_list(cls);
    cls-&gt;setInfo(RW_LOADED); 
}
</code></pre>

<h3 id="toc_1">initialize</h3>

<ul>
<li>向类或对象发送消息时，会调用<code>lookUpImpOrForward</code>查找，并会检查是否初始化过，如果没有，则会调用<code>_class_initialize</code>做初始化。</li>
</ul>

<pre><code class="language-text">IMP lookUpImpOrForward(Class cls, SEL sel, id inst, 
                       bool initialize, bool cache, bool resolver)
{
    // ...

    if (initialize  &amp;&amp;  !cls-&gt;isInitialized()) {
        _class_initialize (_class_getNonMetaClass(cls, inst));
        // If sel == initialize, _class_initialize will send +initialize and 
        // then the messenger will send +initialize again after this 
        // procedure finishes. Of course, if this is not being called 
        // from the messenger then it won&#39;t happen. 2778172
    }

    // ...

    return imp;
}
</code></pre>

<h3 id="toc_2">参考</h3>

<ul>
<li><a href="http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html">understanding-objective-c-runtime</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">ObjCRuntimeGuide</a></li>
<li><a href="http://opensource.apple.com/tarballs/objc4/">runtime源码</a></li>
<li><a href="http://blog.jobbole.com/45963/">Objective-C 的动态提示和技巧</a></li>
<li><a href="http://www.cocoachina.com/ios/20150104/10826.html">NSObject的load和initialize方法</a></li>
<li><a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated-objects</a></li>
<li><a href="http://esoftmobile.com/2014/02/19/method-swizzling/">method-swizzling</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC Runtime(5)之Method Swizzling]]></title>
    <link href="https://jacoli.github.io/15479057717312.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717312.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">Method的几个概念</h3>

<ul>
<li><code>Method</code>包含方法名<code>Selector</code>、函数地址<code>IMP</code>、参数类型<code>TypeEncoding</code>。</li>
</ul>

<pre><code class="language-text">NSLog(@&quot;    method name = %s&quot;, sel_getName(method_getName(method)));
NSLog(@&quot;    method type encode = %s&quot;, method_getTypeEncoding(method));
NSLog(@&quot;    NumberOfArguments = %d&quot;, method_getNumberOfArguments(method));
NSLog(@&quot;    ReturnType = %s&quot;, method_copyReturnType(method));
</code></pre>

<pre><code class="language-text">2016-04-08 20:54:59.351 OCRuntime[54195:953880]     method name = setNumberProperty:
2016-04-08 20:54:59.352 OCRuntime[54195:953880]     method type encode = v24@0:8@16
2016-04-08 20:54:59.352 OCRuntime[54195:953880]     NumberOfArguments = 3
2016-04-08 20:54:59.352 OCRuntime[54195:953880]     ReturnType = v
</code></pre>

<h3 id="toc_1">动态修改Method的几个接口</h3>

<pre><code class="language-text">// 设置或交换IMP
IMP method_setImplementation(Method m, IMP imp);
void method_exchangeImplementations(Method m1, Method m2);
</code></pre>

<pre><code class="language-text">BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types);
                                 
// 如果原来没有这个方法，则直接添加Method，效果同class_addMethod
// 如果原来有，则替换掉原来的IMP，忽略参数类型
IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types);
</code></pre>

<ul>
<li>例子：</li>
</ul>

<pre><code class="language-text">+ (void)load {
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        Class class = [self class];

        // When swizzling a class method, use the following:
        // Class class = object_getClass((id)self);

        SEL originalSelector = @selector(viewWillAppear:);
        SEL swizzledSelector = @selector(xxx_viewWillAppear:);

        Method originalMethod = class_getInstanceMethod(class, originalSelector);
        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);

        BOOL didAddMethod =
            class_addMethod(class,
                originalSelector,
                method_getImplementation(swizzledMethod),
                method_getTypeEncoding(swizzledMethod));

        if (didAddMethod) {
            class_replaceMethod(class,
                swizzledSelector,
                method_getImplementation(originalMethod),
                method_getTypeEncoding(originalMethod));
        } else {
            method_exchangeImplementations(originalMethod, swizzledMethod);
        }
    });
}
</code></pre>

<h3 id="toc_2">参考</h3>

<ul>
<li><a href="http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html">understanding-objective-c-runtime</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">ObjCRuntimeGuide</a></li>
<li><a href="http://opensource.apple.com/tarballs/objc4/">runtime源码</a></li>
<li><a href="http://blog.jobbole.com/45963/">Objective-C 的动态提示和技巧</a></li>
<li><a href="http://www.cocoachina.com/ios/20150104/10826.html">NSObject的load和initialize方法</a></li>
<li><a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated-objects</a></li>
<li><a href="http://esoftmobile.com/2014/02/19/method-swizzling/">method-swizzling</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC Runtime(4)之Message Forwarding]]></title>
    <link href="https://jacoli.github.io/15479057717367.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717367.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">消息发送</h3>

<ul>
<li>对象方法的调用就是向该对象发送消息。</li>
</ul>

<pre><code class="language-text">    OCHelper *object = [[OCHelper alloc] init];
    
    // 以下两句代码效果是相同的。
    [object onHandler];
    objc_msgSend(object, @selector(onHandler));
</code></pre>

<ul>
<li>编译阶段，会自动将OC方法调用转化成内联的<code>objc_msgSend</code>方法调用。</li>
</ul>

<h3 id="toc_1">消息转发</h3>

<ul>
<li>有了OC的消息机制，就可以在运行时修改消息执行路径。</li>
<li><p><code>objc_msgSend</code>会调用<code>lookUpImpOrForward</code>从类（或父类）的<code>methodsCache</code>或<code>methodList</code>寻找方法。</p></li>
<li><p><code>lookUpImpOrForward</code>的源码如下：</p></li>
</ul>

<pre><code class="language-text">IMP lookUpImpOrForward(Class cls, SEL sel, id inst, 
                       bool initialize, bool cache, bool resolver)
{
    Class curClass;
    IMP methodPC = nil;
    Method meth;
    bool triedResolver = NO;

    methodListLock.assertUnlocked();

    // Optimistic cache lookup
    if (cache) {
        methodPC = _cache_getImp(cls, sel);
        if (methodPC) return methodPC;    
    }

    // Check for freed class
    if (cls == _class_getFreedObjectClass())
        return (IMP) _freedHandler;

    // Check for +initialize
    if (initialize  &amp;&amp;  !cls-&gt;isInitialized()) {
        _class_initialize (_class_getNonMetaClass(cls, inst));
        // If sel == initialize, _class_initialize will send +initialize and 
        // then the messenger will send +initialize again after this 
        // procedure finishes. Of course, if this is not being called 
        // from the messenger then it won&#39;t happen. 2778172
    }

    // The lock is held to make method-lookup + cache-fill atomic 
    // with respect to method addition. Otherwise, a category could 
    // be added but ignored indefinitely because the cache was re-filled 
    // with the old value after the cache flush on behalf of the category.
 retry:
    methodListLock.lock();

    // Ignore GC selectors
    if (ignoreSelector(sel)) {
        methodPC = _cache_addIgnoredEntry(cls, sel);
        goto done;
    }

    // Try this class&#39;s cache.

    methodPC = _cache_getImp(cls, sel);
    if (methodPC) goto done;

    // Try this class&#39;s method lists.

    meth = _class_getMethodNoSuper_nolock(cls, sel);
    if (meth) {
        log_and_fill_cache(cls, cls, meth, sel);
        methodPC = method_getImplementation(meth);
        goto done;
    }

    // Try superclass caches and method lists.

    curClass = cls;
    while ((curClass = curClass-&gt;superclass)) {
        // Superclass cache.
        meth = _cache_getMethod(curClass, sel, _objc_msgForward_impcache);
        if (meth) {
            if (meth != (Method)1) {
                // Found the method in a superclass. Cache it in this class.
                log_and_fill_cache(cls, curClass, meth, sel);
                methodPC = method_getImplementation(meth);
                goto done;
            }
            else {
                // Found a forward:: entry in a superclass.
                // Stop searching, but don&#39;t cache yet; call method 
                // resolver for this class first.
                break;
            }
        }

        // Superclass method list.
        meth = _class_getMethodNoSuper_nolock(curClass, sel);
        if (meth) {
            log_and_fill_cache(cls, curClass, meth, sel);
            methodPC = method_getImplementation(meth);
            goto done;
        }
    }

    // No implementation found. Try method resolver once.

    if (resolver  &amp;&amp;  !triedResolver) {
        methodListLock.unlock();
        _class_resolveMethod(cls, sel, inst);
        triedResolver = YES;
        goto retry;
    }

    // No implementation found, and method resolver didn&#39;t help. 
    // Use forwarding.

    _cache_addForwardEntry(cls, sel);
    methodPC = _objc_msgForward_impcache;

 done:
    methodListLock.unlock();

    // paranoia: look for ignored selectors with non-ignored implementations
    assert(!(ignoreSelector(sel)  &amp;&amp;  methodPC != (IMP)&amp;_objc_ignored_method));

    return methodPC;
}
</code></pre>

<ul>
<li>如果找到方法，则直接执行。</li>
<li>如果没有找到方法，则提供一套Hock机制，允许运行时解决。</li>
<li><code>NSObject</code>提供了些可重载的方法，如下：</li>
</ul>

<pre><code class="language-text">@interface NSObject
- (id)forwardingTargetForSelector:(SEL)aSelector;
- (void)forwardInvocation:(NSInvocation *)anInvocation;
- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector;
+ (BOOL)resolveClassMethod:(SEL)sel;
+ (BOOL)resolveInstanceMethod:(SEL)sel;
@end
</code></pre>

<ul>
<li>如果没有找到方法，会先调用<code>resolveInstanceMethod</code>，在该方法中可动态添加方法到类。</li>
</ul>

<p><img src="media/15479057717367/messaging.png" alt="messaging"/></p>

<ul>
<li>如果不行，接下来会调用<code>forwardingTargetForSelector</code>转发，可动态替换掉响应对象。</li>
<li>如果还不行，则调用<code>methodSignatureForSelector</code>和<code>forwardInvocation</code>转发<code>Invocation</code>。</li>
<li>如果还不行，则会抛异常<code>doesNotRecognizeSelector</code>。</li>
</ul>

<h3 id="toc_2">参考</h3>

<ul>
<li><a href="http://cocoasamurai.blogspot.jp/2010/01/understanding-objective-c-runtime.html">understanding-objective-c-runtime</a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">ObjCRuntimeGuide</a></li>
<li><a href="http://opensource.apple.com/tarballs/objc4/">runtime源码</a></li>
<li><a href="http://blog.jobbole.com/45963/">Objective-C 的动态提示和技巧</a></li>
<li><a href="http://www.cocoachina.com/ios/20150104/10826.html">NSObject的load和initialize方法</a></li>
<li><a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated-objects</a></li>
<li><a href="http://esoftmobile.com/2014/02/19/method-swizzling/">method-swizzling</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC Runtime(3)之Associated Objects]]></title>
    <link href="https://jacoli.github.io/15479057717432.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717432.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">关联对象</h3>

<ul>
<li><objc/runtime.h>提供了三个方法，分别是get、set、remove</li>
</ul>

<pre><code class="language-text">void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy);
id objc_getAssociatedObject(id object, const void *key);
void objc_removeAssociatedObjects(id object);
</code></pre>

<h3 id="toc_1">源码</h3>

<ul>
<li>获取</li>
</ul>

<pre><code class="language-text">id _object_get_associative_reference(id object, void *key) {
    id value = nil;
    uintptr_t policy = OBJC_ASSOCIATION_ASSIGN;
    {
        AssociationsManager manager;
        AssociationsHashMap &amp;associations(manager.associations());
        disguised_ptr_t disguised_object = DISGUISE(object);
        AssociationsHashMap::iterator i = associations.find(disguised_object);
        if (i != associations.end()) {
            ObjectAssociationMap *refs = i-&gt;second;
            ObjectAssociationMap::iterator j = refs-&gt;find(key);
            if (j != refs-&gt;end()) {
                ObjcAssociation &amp;entry = j-&gt;second;
                value = entry.value();
                policy = entry.policy();
                if (policy &amp; OBJC_ASSOCIATION_GETTER_RETAIN) ((id(*)(id, SEL))objc_msgSend)(value, SEL_retain);
            }
        }
    }
    if (value &amp;&amp; (policy &amp; OBJC_ASSOCIATION_GETTER_AUTORELEASE)) {
        ((id(*)(id, SEL))objc_msgSend)(value, SEL_autorelease);
    }
    return value;
}
</code></pre>

<ul>
<li>设置</li>
</ul>

<pre><code class="language-text">void _object_set_associative_reference(id object, void *key, id value, uintptr_t policy) {
    // retain the new value (if any) outside the lock.
    ObjcAssociation old_association(0, nil);
    id new_value = value ? acquireValue(value, policy) : nil;
    {
        AssociationsManager manager;
        AssociationsHashMap &amp;associations(manager.associations());
        disguised_ptr_t disguised_object = DISGUISE(object);
        if (new_value) {
            // break any existing association.
            AssociationsHashMap::iterator i = associations.find(disguised_object);
            if (i != associations.end()) {
                // secondary table exists
                ObjectAssociationMap *refs = i-&gt;second;
                ObjectAssociationMap::iterator j = refs-&gt;find(key);
                if (j != refs-&gt;end()) {
                    old_association = j-&gt;second;
                    j-&gt;second = ObjcAssociation(policy, new_value);
                } else {
                    (*refs)[key] = ObjcAssociation(policy, new_value);
                }
            } else {
                // create the new association (first time).
                ObjectAssociationMap *refs = new ObjectAssociationMap;
                associations[disguised_object] = refs;
                (*refs)[key] = ObjcAssociation(policy, new_value);
                object-&gt;setHasAssociatedObjects();
            }
        } else {
            // setting the association to nil breaks the association.
            AssociationsHashMap::iterator i = associations.find(disguised_object);
            if (i !=  associations.end()) {
                ObjectAssociationMap *refs = i-&gt;second;
                ObjectAssociationMap::iterator j = refs-&gt;find(key);
                if (j != refs-&gt;end()) {
                    old_association = j-&gt;second;
                    refs-&gt;erase(j);
                }
            }
        }
    }
    // release the old value (outside of the lock).
    if (old_association.hasValue()) ReleaseValue()(old_association);
}
</code></pre>

<ul>
<li>释放</li>
</ul>

<pre><code class="language-text">id 
object_dispose(id obj)
{
    if (!obj) return nil;

    objc_destructInstance(obj);

    free(obj);

    return nil;
}

void *objc_destructInstance(id obj) 
{
    if (obj) {
        // Read all of the flags at once for performance.
        bool cxx = obj-&gt;hasCxxDtor();
        bool assoc = !UseGC &amp;&amp; obj-&gt;hasAssociatedObjects();
        bool dealloc = !UseGC;

        // This order is important.
        if (cxx) object_cxxDestruct(obj);
        if (assoc) _object_remove_assocations(obj);
        if (dealloc) obj-&gt;clearDeallocating();
    }

    return obj;
}

void _object_remove_assocations(id object) {
    vector&lt; ObjcAssociation,ObjcAllocator&lt;ObjcAssociation&gt; &gt; elements;
    {
        AssociationsManager manager;
        AssociationsHashMap &amp;associations(manager.associations());
        if (associations.size() == 0) return;
        disguised_ptr_t disguised_object = DISGUISE(object);
        AssociationsHashMap::iterator i = associations.find(disguised_object);
        if (i != associations.end()) {
            // copy all of the associations that need to be removed.
            ObjectAssociationMap *refs = i-&gt;second;
            for (ObjectAssociationMap::iterator j = refs-&gt;begin(), end = refs-&gt;end(); j != end; ++j) {
                elements.push_back(j-&gt;second);
            }
            // remove the secondary table.
            delete refs;
            associations.erase(i);
        }
    }
    // the calls to releaseValue() happen outside of the lock.
    for_each(elements.begin(), elements.end(), ReleaseValue());
}

</code></pre>

<h3 id="toc_2">参考</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">ObjCRuntimeGuide</a></li>
<li><a href="http://opensource.apple.com/tarballs/objc4/">runtime源码</a></li>
<li><a href="http://blog.jobbole.com/45963/">Objective-C 的动态提示和技巧</a></li>
<li><a href="http://www.cocoachina.com/ios/20150104/10826.html">NSObject的load和initialize方法</a></li>
<li><a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated-objects</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC Runtime(1)之Object&Class]]></title>
    <link href="https://jacoli.github.io/15479057717556.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717556.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">Objective-C Runtime</h3>

<p><img src="media/15479057717556/OC-Runtime.png" alt="OC-Runtime"/></p>

<ul>
<li><p>Objective-C是面向运行时的编程语言，这就意味着运行阶段才知道如何执行，而不是编译链接阶段就确定好。</p></li>
<li><p>What is the Objective-C Runtime?</p></li>
</ul>

<pre><code class="language-text">The Objective-C Runtime is a Runtime Library, it&#39;s a library written 
mainly in C &amp; Assembler that adds the Object Oriented capabilities 
to C to create Objective-C. This means it loads in Class information, 
does all method dispatching, method forwarding, etc. The Objective-C 
runtime essentially creates all the support structures that make 
Object Oriented Programming with Objective-C Possible.
</code></pre>

<ul>
<li>有了Objective-C Runtime，就有了各种在运行时修改代码的hack手段。</li>
</ul>

<h3 id="toc_1">类</h3>

<ul>
<li>先看下<code>类</code>的结构体定义，除了存放类的基本信息，还存放对象的变量、方法、协议的元信息。程序加载时，<code>类</code>结构体会被实例化，并放到全局列表中<code>g_classList</code>，结构体的<code>isa</code>、<code>super_class</code>、<code>methodLists</code>等属性也一起被初始化。</li>
</ul>

<pre><code class="language-text">// 伪代码，对源码稍做修改。

static Class *g_classList;

struct objc_class {
    Class isa;          // 指向元类
    Class super_class;  // 指向父类
    
    // 类基本信息
    const char *name;
    long version;
    long info;
    long instance_size;
    
    // 类的变量、方法、协议的元信息
    struct objc_ivar_list *ivars;
    struct objc_method_list **methodLists;
    struct objc_protocol_list *protocols;
    
    // 方法缓存
    struct objc_cache *cache;
};
typedef struct objc_class *Class;

bool isMetaClass() {
        return info &amp; CLS_META;
    }
</code></pre>

<h3 id="toc_2">元类</h3>

<ul>
<li><code>元类</code>跟<code>类</code>使用相同的结构体，只是通过<code>isMetaClass</code>方法做区分。</li>
<li><p><code>元类</code>结构体中，存放类的变量、方法、协议的元信息。</p></li>
<li><p>对象、类、元类的关系如下：</p></li>
</ul>

<p><img src="media/15479057717556/OC-Runtime-%E7%B1%BB%E5%9B%BE.png" alt="OC-Runtime-类图"/></p>

<h3 id="toc_3">对象</h3>

<ul>
<li>对象的结构体如下，存放对象的变量数据，其他的都是先通过<code>isa</code>找到类，再从类中找出变量、方法等的元信息。</li>
</ul>

<pre><code class="language-text">// 伪代码，对源码稍做修改。

struct objc_object {
    Class isa;
    
    // 变量的数据
    void *varsLayout;
}

typedef struct objc_object *id
</code></pre>

<ul>
<li>创建对象，<code>NSObject *obj = [[NSObject alloc] init];</code>可能对应以下一些动作。</li>
</ul>

<pre><code class="language-text">// 伪代码

{
    // 找到类
    Class cls = findClass(&quot;NSObject&quot;);
    
    // 找到alloc方法，执行生成对象
    IMP imp = findImp(cls, &quot;alloc&quot;);
    id obj = imp(cls);
    
    // 找到init方法，执行初始化对象
    IMP imp = findImp(cls, &quot;init&quot;);
    imp(obj);
    
    // 返回对象
    return obj;
}   
    
id alloc(Class cls) {
    id obj = malloc(sizeof(struct objc_object));
    obj-&gt;isa = cls;
    return obj;
}

id init(id obj) {
    obj-&gt;varsLayout = xxx;
}   
</code></pre>

<h3 id="toc_4">总结</h3>

<ul>
<li>总的来说，全局维护一张类表，存放类方法、实例方法、实例变量的元信息等。程序加载阶段会初始化这张表。运行阶段，也可以通过<code>addMethod</code>、<code>class_replaceMethod</code>、<code>class_addIvar</code>、<code>class_addProtocol</code>、<code>class_addProperty</code>等接口动态修改这张表。<br/>
### 参考</li>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">ObjCRuntimeGuide</a></li>
<li><a href="http://opensource.apple.com/tarballs/objc4/">runtime源码</a></li>
<li><a href="http://blog.jobbole.com/45963/">Objective-C 的动态提示和技巧</a></li>
<li><a href="http://www.cocoachina.com/ios/20150104/10826.html">NSObject的load和initialize方法</a></li>
<li><a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated-objects</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OC Runtime(2)之Ivar&Property&Method&Protocol]]></title>
    <link href="https://jacoli.github.io/15479057717489.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717489.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">Ivar</h3>

<pre><code class="language-text">struct old_ivar {
    char *ivar_name;
    char *ivar_type;
    int ivar_offset;
#ifdef __LP64__
    int space;
#endif
};
</code></pre>

<h3 id="toc_1">Property</h3>

<pre><code class="language-text">struct old_property {
    const char *name;
    const char *attributes;
};
</code></pre>

<h3 id="toc_2">Method</h3>

<pre><code class="language-text">struct old_method {
    SEL method_name;
    char *method_types;
    IMP method_imp;
};
</code></pre>

<h3 id="toc_3">protocol</h3>

<pre><code class="language-text">struct old_protocol {
    Class isa;
    const char *protocol_name;
    struct old_protocol_list *protocol_list;
    struct objc_method_description_list *instance_methods;
    struct objc_method_description_list *class_methods;
};
</code></pre>

<pre><code class="language-text">struct objc_method_description *
lookup_protocol_method(old_protocol *proto, SEL aSel, 
                       bool isRequiredMethod, bool isInstanceMethod, 
                       bool recursive)
{
    struct objc_method_description *m = nil;
    old_protocol_ext *ext;

    if (isRequiredMethod) {
        if (isInstanceMethod) {
            m = lookup_method(proto-&gt;instance_methods, aSel);
        } else {
            m = lookup_method(proto-&gt;class_methods, aSel);
        }
    } else if ((ext = ext_for_protocol(proto))) {
        if (isInstanceMethod) {
            m = lookup_method(ext-&gt;optional_instance_methods, aSel);
        } else {
            m = lookup_method(ext-&gt;optional_class_methods, aSel);
        }
    }

    if (!m  &amp;&amp;  recursive  &amp;&amp;  proto-&gt;protocol_list) {
        int i;
        for (i = 0; !m  &amp;&amp;  i &lt; proto-&gt;protocol_list-&gt;count; i++) {
            m = lookup_protocol_method(proto-&gt;protocol_list-&gt;list[i], aSel, 
                                       isRequiredMethod,isInstanceMethod,true);
        }
    }

    return m;
}
</code></pre>

<h3 id="toc_4">category</h3>

<pre><code class="language-text">struct old_category {
    char *category_name;
    char *class_name;
    struct old_method_list *instance_methods;
    struct old_method_list *class_methods;
    struct old_protocol_list *protocols;
    uint32_t size;
    struct old_property_list *instance_properties;
};
</code></pre>

<h3 id="toc_5">参考</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048">ObjCRuntimeGuide</a></li>
<li><a href="http://opensource.apple.com/tarballs/objc4/">runtime源码</a></li>
<li><a href="http://blog.jobbole.com/45963/">Objective-C 的动态提示和技巧</a></li>
<li><a href="http://www.cocoachina.com/ios/20150104/10826.html">NSObject的load和initialize方法</a></li>
<li><a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated-objects</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
