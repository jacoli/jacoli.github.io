<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李传格的博客]]></title>
  <link href="https://jacoli.github.io/atom.xml" rel="self"/>
  <link href="https://jacoli.github.io/"/>
  <updated>2019-01-22T15:27:37+08:00</updated>
  <id>https://jacoli.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[问题：UICollectionView Cell之间存在缝隙]]></title>
    <link href="https://jacoli.github.io/15480679782005.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782005.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">原因</h2>

<ul>
<li><p>当<code>UICollectionViewCell</code>的size不为整数时，<code>UICollectionViewFlowLayout</code>在布局计算时，可能会调整Cell的frame.origin，使Cell按照最小物理像素（渲染像素）对齐，导致出现缝隙。</p></li>
<li><p>假设当前Cell的frame.origin.y=100.8（逻辑像素），转化成渲染像素（参考备注）是201.6（iPhone 8）或302.4（iPhone 8 Plus）。为了按渲染像素对齐，<code>UICollectionViewFlowLayout</code>应该会四舍五入取整，取整后为202（iPhone 8）或302（iPhone 8 Plus），转成逻辑像素101（iPhone 8）或100.667（iPhone 8 Plus），导致在iphone8上就会出现0.2像素的缝隙。</p></li>
<li><p>分辨率相关的，可以百度下。</p></li>
</ul>

<h2 id="toc_1">简单解决办法：</h2>

<ul>
<li>主动把Cell的size取整，不丢给<code>UICollectionViewFlowLayout</code>处理。
<code>
- (CGSize)fixedCollectionCellSize:(CGSize)size {<br/>
CGFloat scale = [UIScreen mainScreen].scale;<br/>
return CGSizeMake(round(scale * size.width) / scale, round(scale * size.height) / scale);<br/>
}
</code></li>
</ul>

<h2 id="toc_2">Demo实验</h2>

<ul>
<li>UITableView，Cell高度设置成100.12，没有强制被按渲染像素对齐，如 <code>99.62</code> <code>1802.16</code>  <code>1902.28</code></li>
</ul>

<pre><code class="language-text">(lldb) po [0x7fb85b83b800 recursiveDescription]
&lt;UITableView: 0x7fb85b83b800; frame = (0 0; 375 667); clipsToBounds = YES; gestureRecognizers = &lt;NSArray: 0x6000004451f0&gt;; layer = &lt;CALayer: 0x60000022dc40&gt;; contentOffset: {0, 1272.5}; contentSize: {375, 2002.4000549316406}; adjustedContentInset: {20, 0, 0, 0}&gt;
   | &lt;UITableViewCell: 0x7fb85c862a00; frame = (0 1902.28; 375 100.12); autoresize = W; layer = &lt;CALayer: 0x6040004265a0&gt;&gt;
   |    | &lt;UITableViewCellContentView: 0x7fb85b70fea0; frame = (0 0; 375 99.62); gestureRecognizers = &lt;NSArray: 0x6040002426a0&gt;; layer = &lt;CALayer: 0x604000425e80&gt;&gt;
   |    |    | &lt;UIImageView: 0x7fb85b41a330; frame = (0 0; 0 0); userInteractionEnabled = NO; layer = &lt;CALayer: 0x6000008215c0&gt;&gt;
   |    | &lt;_UITableViewCellSeparatorView: 0x7fb85b710820; frame = (15 99.62; 360 0.5); layer = &lt;CALayer: 0x604000427640&gt;&gt;
   | &lt;UITableViewCell: 0x7fb85c862400; frame = (0 1802.16; 375 100.12); autoresize = W; layer = &lt;CALayer: 0x6040002212e0&gt;&gt;
</code></pre>

<ul>
<li>iPhone Plus 8，UICollectionView，Cell高度设置成100.12，强制被按渲染像素对齐了，frame.origin.y被调整后的值，如<code>200.333</code> <code>500.667</code> <code>600.667</code></li>
</ul>

<pre><code class="language-text">   | &lt;UICollectionViewCell: 0x7fdd9f71f010; frame = (0 200.333; 414 100.12); hidden = YES; layer = &lt;CALayer: 0x60000023d800&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f71f470; frame = (0 300.333; 414 100.12); layer = &lt;CALayer: 0x60000023e380&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72aa30; frame = (0 400.333; 414 100.12); layer = &lt;CALayer: 0x60000023f4e0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72ae90; frame = (0 500.667; 414 100.12); layer = &lt;CALayer: 0x60000023f9a0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72b510; frame = (0 600.667; 414 100.12); layer = &lt;CALayer: 0x60000023fbc0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7fdd9f72d1a0; frame = (0 701; 414 100.12); layer = &lt;CALayer: 0x60000023fdc0&gt;&gt;
</code></pre>

<ul>
<li>iPhone Plus，UICollectionView，Cell高度设置成100.12，强制被按渲染像素对齐了，frame.origin.y被调整后的值，如<code>300.5</code> <code>400.5</code> <code>500.5</code></li>
</ul>

<pre><code class="language-text">   | &lt;UICollectionViewCell: 0x7f85b441b6c0; frame = (0 0; 375 100.12); hidden = YES; layer = &lt;CALayer: 0x600000035ec0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4502e10; frame = (0 100; 375 100.12); hidden = YES; layer = &lt;CALayer: 0x600000035c20&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4505c10; frame = (0 200; 375 100.12); layer = &lt;CALayer: 0x600000036300&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4506400; frame = (0 300.5; 375 100.12); layer = &lt;CALayer: 0x600000036be0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4506d70; frame = (0 400.5; 375 100.12); layer = &lt;CALayer: 0x600000227ac0&gt;&gt;
   | &lt;UICollectionViewCell: 0x7f85b4507560; frame = (0 500.5; 375 100.12); layer = &lt;CALayer: 0x6000002277c0&gt;&gt;
</code></pre>

<h3 id="toc_3">备注</h3>

<p>Points（逻辑像素）&lt;---&gt;Rendered Pixels（渲染像素）&lt;---&gt;Physical Pixels（物理像素）</p>

<p><img src="https://upload-images.jianshu.io/upload_images/1824896-195d0d1574cf13c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS不同机型尺寸.png"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto Layout]]></title>
    <link href="https://jacoli.github.io/15480679782500.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782500.html</id>
    <content type="html"><![CDATA[
<p>1、添加约束条件时，必须存在父视图或共同的父视图<br/>
2、auto layout engine计算时，必须知道位置和大小的约束<br/>
3、但某子视图启动auto layout约束后，父视图也随之启动<br/>
4、frame自动转换成auto layout约束<br/>
5、UILabel、UIImageVIew、UIButton、UITextField等，如果没有设置大小约束，则由intrinsicContentSize隐式提供，当内容改变后，intrinsicContentSize随之改变，并驱动auto layout engine重新计算<br/>
6、content hugging priority（内容收缩优先级）和content compression resistance priority （内容放大优先级）和intrinsicContentSize 一起决定大小的计算</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AppLink]]></title>
    <link href="https://jacoli.github.io/15480679782446.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782446.html</id>
    <content type="html"><![CDATA[
<p><img src="http://upload-images.jianshu.io/upload_images/1824896-e9fe114c4419d41e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-09-13 下午2.09.46.png"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebView In Mobile App]]></title>
    <link href="https://jacoli.github.io/15480679782625.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782625.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="http://blog.csdn.net/carson_ho/article/details/52693322"><a href="http://blog.csdn.net/carson_ho/article/details/52693322">Android：最全面的 Webview 详解</a></a></li>
<li><a href="http://blog.csdn.net/carson_ho/article/details/64904691"><a href="http://blog.csdn.net/carson_ho/article/details/64904691">Android：你要的WebView与 JS 交互方式 都在这里了</a></a></li>
<li><a href="http://www.cnblogs.com/whoislcj/p/5645025.html"><a href="http://www.cnblogs.com/whoislcj/p/5645025.html">Android混合开发之WebView使用总结</a></a></li>
<li><a href="http://www.open-open.com/lib/view/open1472481479625.html">还在用Android自带的WebView组件？太Out了！</a></li>
<li><a href="http://blog.csdn.net/u011904605/article/details/52301416">关于Android APP集成腾讯X5 WebKit</a></li>
<li><a href="https://github.com/lzyzsd/JsBridge">JsBridge</a></li>
<li><a href="http://www.cnblogs.com/oc-bowen/p/5547900.html">UIWebView和WKWebView的使用及js交互</a></li>
<li><a href="https://github.com/marcuswestin/WebViewJavascriptBridge">WebViewJavascriptBridge</a></li>
<li>淘宝的Windvane、微信的小程序也算是Hybrid框架，在WebView基础上，提供组件定制化、规范化、性能优化、访问Native能力等</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于电商的脑爆、YY]]></title>
    <link href="https://jacoli.github.io/15480679570014.html"/>
    <updated>2019-01-21T18:52:37+08:00</updated>
    <id>https://jacoli.github.io/15480679570014.html</id>
    <content type="html"><![CDATA[
<p><img src="http://upload-images.jianshu.io/upload_images/1824896-376342729f32f6b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-07-22 下午2.20.43.png"/></p>

<p><img src="http://upload-images.jianshu.io/upload_images/1824896-74963cccc535cd20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-07-22 下午2.21.00.png"/></p>

<p>1、用户系统：会员信息、地址管理等</p>

<p>2、商品系统：商品库、SKU、类目、库存、购物车</p>

<p>3、营销系统：运营位、优惠券、活动</p>

<p>4、交易系统：下单、支付、订单、逆向</p>

<p>5、报表 对账 结算</p>

<p>6、内容系统：文章、专辑、视频</p>

<p>7、搜索、推荐</p>

<p>7、其他：物流、推送</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[* [什么是软件架构](https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/7485920?fr=aladdin)]]></title>
    <link href="https://jacoli.github.io/15480679781845.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679781845.html</id>
    <content type="html"><![CDATA[
<ul>
<li>架构服务于效率、质量、体验、性能等</li>
<li>架构优化的短期成本和长期收益的权衡</li>
<li>架构要与当前业务发展和团队规模相匹配</li>
<li>架构设计的方法论和实践
<code>
解耦：模块化、组件化，<br/>
复用：基础组件，<br/>
分层：视图、业务、基础服务，<br/>
协议化等
</code></li>
<li><a href="http://www.infoq.com/cn/news/2017/06/VirtualAPK-opensource?utm_source=news_about_architecture-design&amp;utm_medium=link&amp;utm_campaign=architecture-design">滴滴插件化项目VirtualAPK开源</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286672&amp;idx=1&amp;sn=4d9db00c496fcafd1d3e01d69af083f9&amp;chksm=8334cc92b4434584e8bdb117274f41145fb49ba467ec0cd9ba5e3551a8abf92f1996bd6b147a&amp;mpshare=1&amp;scene=24&amp;srcid=0630STw0N4c83hIAqLo9Tkdm&amp;key=c969774f949c279bf4404f575b096d071dfd21b85924484756752b237733d001fc998a2a59df09557a1190be7ce550df361bb8e62077f558b516011b3c3ce705b5cef390bed833792073e747cdcbbb2e&amp;ascene=0&amp;uin=MTc0NzM4NzU0MA%3D%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=k43tzMF8U5%2FPsgUiLvhHQo3sXCCiUaVGAY20v8HBLLe9kKAiqhQfHGbhVeDiDq29">微信Android模块化架构重构实践</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDEwNjk5OQ==&amp;mid=2650400348&amp;idx=1&amp;sn=99bc1bce932c5b9000d5b54afa2de70e&amp;chksm=83952e44b4e2a752f2ef0aa2f31c80ff82a2dfdaef433cd5cb733f17eb9ff47899acbde09685&amp;mpshare=1&amp;scene=24&amp;srcid=0630xBc1VqyISqqlOOeGof54&amp;key=c969774f949c279b41505ca7d0c3b547b7694aae72cd532f903bcc00efbc8c9cec1a5a62405a2a17223d09a370575852d2e0306768755c1ad00e0309a7e8dc1ae557ebf30f727d82012dfa50e4f07acc&amp;ascene=0&amp;uin=MTc0NzM4NzU0MA%3D%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=k43tzMF8U5%2FPsgUiLvhHQo3sXCCiUaVGAY20v8HBLLe9kKAiqhQfHGbhVeDiDq29">Atlas-手淘组件化框架的前世今生和未来的路</a></li>
<li>架构的保持</li>
<li>代码之外：人的因素</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络相关]]></title>
    <link href="https://jacoli.github.io/15480679781942.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679781942.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="https://github.com/Tencent/mars/">Mars</a></li>
<li><a href="http://www.iteye.com/news/32012"><a href="http://www.iteye.com/news/32012">微信终端跨平台组件 Mars 正式开源！</a></a></li>
<li><a href="http://www.cocoachina.com/ios/20170425/19118.html">关于 iOS HTTP2.0 的一次学习实践</a></li>
<li><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a></li>
<li><a href="https://github.com/Alamofire/Alamofire">Alamofire</a></li>
<li><a href="https://github.com/RestKit/RestKit">RestKit</a></li>
<li><a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a></li>
<li><a href="https://github.com/square/retrofit">Retrofit</a></li>
<li><a href="https://github.com/square/okhttp">okhttp</a></li>
<li><a href="http://www.infoq.com/cn/articles/mogujie-app-chromium-network-layer/">蘑菇街App Chromium网络栈实践</a></li>
<li>iOS9.0+支持HTTP2</li>
<li><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html">NSURLSession</a></li>
<li><a href="http://www.open-open.com/lib/view/open1478836390465.html">蘑菇街11.11：移动流量猛增，如何设计高并发多终端的无线网关</a></li>
<li><a href="http://blog.csdn.net/hguisu/article/details/7445768/"><a href="http://blog.csdn.net/hguisu/article/details/7445768">Linux的SOCKET编程详解</a></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android存储]]></title>
    <link href="https://jacoli.github.io/15480679782398.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782398.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="http://blog.csdn.net/amazing7/article/details/51437435">Android 数据存储五种方式使用与总结</a></li>
<li><a href="https://github.com/Xiaofei-it/AndroidDataStorage">AndroidDataStorage</a></li>
<li><a href="https://github.com/realm/realm-java">realm-java</a></li>
<li><a href="https://github.com/greenrobot/greenDAO">greenDAO</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记4]]></title>
    <link href="https://jacoli.github.io/15480679782285.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782285.html</id>
    <content type="html"><![CDATA[
<ul>
<li><a href="http://www.cocoachina.com/ios/20170502/19152.html">iOS 10.3开始可以动态改变app图标</a></li>
<li><a href="http://www.cocoachina.com/ios/20170507/19201.html">浅谈iOS视频播放的N种解决方案</a></li>
<li><a href="http://www.cocoachina.com/programmer/20170505/19189.html">【React Native】从源码一步一步解析它的实现原理</a></li>
<li><a href="http://blog.jobbole.com/84903/">十分钟搞清字符集和字符编码</a></li>
<li><a href="http://pingguohe.net/2016/01/31/lazyscroll.html">iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a></li>
<li><a href="http://pingguohe.net/2016/12/20/Tangram-design-and-practice.html">页面动态化的基础 —— Tangram</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记2]]></title>
    <link href="https://jacoli.github.io/15480679782183.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782183.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">数据</h3>

<ul>
<li><a href="https://9to5mac.com/2017/01/05/ios-10-now-installed-on-76-of-active-devices-according-to-apples-stats/">iOS10 设备安装率超7成</a></li>
</ul>

<p>看了下自己app的友盟统计，还有6%的iOS 8.x设备。等iOS 11出来后，再考虑放弃iOS 8.x用户吧。</p>

<ul>
<li><a href="http://www.cocoachina.com/programmer/20170210/18665.html">TIOBE 2月编程语言排行榜，Swift和Objective-C语言分别排在12和19位</a></li>
</ul>

<p>OC稳住呀～</p>

<h3 id="toc_1">文章推荐（转）</h3>

<ul>
<li><a href="http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/">移动端图片格式调研</a></li>
</ul>

<p>最近看到<a href="https://github.com/airbnb/lottie-ios">Lottie</a>项目，一个iOS，Android和React Native库，可以实时渲染After Effects动画，并且允许本地app像静态资源那样轻松地使用动画。回过头又把这篇图片格式调研的文章看了一遍，哈。这篇文章把移动开发常用的几种静态、动态图片做了详细的比较。</p>

<ul>
<li><a href="https://blog.yeatse.com/2016/10/26/support-nsurlprotocol-in-wkwebview/">让 WKWebView 支持 NSURLProtocol</a></li>
</ul>

<p><code>WKWebView</code>不支持<code>NSURLProtocol</code>，导致基于<code>UIWebView＋NSURLProtocol</code>并做了一些深度优化的，很难一下子就迁移到<code>WKWebView</code>。<code>WKWebView</code>内部使用了<code>NSURLProtocol</code>，但没有对外开放，不知道出于什么考虑。这篇文章以比较hack的方式让<code>WKWebView</code>支持<code>NSURLProtocol</code>。</p>

<ul>
<li><a href="http://mp.weixin.qq.com/s/qRW_akbU3TSd0SxpF3iQmQ">DynamicCocoa：滴滴 iOS 动态化方案的诞生与起航</a></li>
</ul>

<p>另一种Native动态化的方案，在OC编译器上动手脚，将OC代码自动编译成可动态下发的JS代码。</p>

<ul>
<li><a href="http://www.jianshu.com/p/c1904fd8db06">Xcode8带来的新特性和坑</a></li>
</ul>

<p>有些特性需要配合ios 10设备使用，比如内存循环引用、DYLD_PRINT_STATISTICS（打印应用预加载时间）等。</p>

<p>在Scheme的Environment Variables添加DYLD_PRINT_STATISTICS＝YES，可以打印应用预加载时间。从打印出来的日志看，<code>dylib loading time</code>占用了不少时间，应该是跟加载的系统库和三方库有关。<br/>
<code>The loading of Apple system frameworks is highly optimized but loading your embedded frameworks can be expensive.</code>  当三方库不采用Framework形式打包，加载时间是少了不少。</p>

<pre><code class="language-text">// 三方库以Frameworks形式打包
Total pre-main time: 392.25 milliseconds (100.0%)
         dylib loading time: 336.73 milliseconds (85.8%)
        rebase/binding time:  10.88 milliseconds (2.7%)
            ObjC setup time:  15.91 milliseconds (4.0%)
           initializer time:  28.65 milliseconds (7.3%)
           slowest intializers :
             libSystem.B.dylib :   4.63 milliseconds (1.1%)
                  AFNetworking :  12.03 milliseconds (3.0%)
</code></pre>

<pre><code class="language-text">// 三方库以.a静态链接库形式链接
Total pre-main time:  93.71 milliseconds (100.0%)
         dylib loading time:  11.46 milliseconds (12.2%)
        rebase/binding time:  27.05 milliseconds (28.8%)
            ObjC setup time:  13.16 milliseconds (14.0%)
           initializer time:  41.94 milliseconds (44.7%)
           slowest intializers :
             libSystem.B.dylib :   5.47 milliseconds (5.8%)
   libBacktraceRecording.dylib :   4.48 milliseconds (4.7%)
                        Fanmei :  54.14 milliseconds (57.7%)　
</code></pre>

<h3 id="toc_2">项目</h3>

<ul>
<li><a href="https://github.com/airbnb/lottie-ios">Lottie</a></li>
</ul>

<p>After Effects动画的渲染引擎。</p>

<ul>
<li><a href="https://github.com/facebookincubator/Keyframes">Keyframes</a></li>
</ul>

<p>A library for converting Adobe AE shape based animations to a data format and playing it back on Android and iOS devices.</p>

<p>跟<a href="https://github.com/airbnb/lottie-ios">Lottie</a>类似，也是After Effects动画的渲染引擎。</p>

<ul>
<li><a href="https://github.com/Instagram/IGListKit">Instagram/IGListKit</a></li>
</ul>

<p>A data-driven UICollectionView framework for building fast and flexible lists.</p>

<ul>
<li><a href="https://github.com/Flipboard/FLEX">Flipboard/FLEX</a></li>
</ul>

<p>An in-app debugging and exploration tool for iOS</p>

<p>iOS设备调试工具，可以查看沙盒，抓包，查看视图信息等。</p>

<ul>
<li><a href="https://github.com/material-components/material-components-ios">material-components-ios</a></li>
</ul>

<p>仿android的meterial design风格的控件</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记3]]></title>
    <link href="https://jacoli.github.io/15480679782229.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782229.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">数据</h3>

<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578648&amp;idx=1&amp;sn=8fecce896bf881334507e7f3f3486c54&amp;chksm=84b3b79fb3c43e89c98ed2e7f60c3c59f00324f53fef012ed33cb8fc6b37e430e83a52dc5f68&amp;mpshare=1&amp;scene=1&amp;srcid=0216VUFfTaK8KjnNJHO0FXJ7#rd">2016 移动应用质量大数据报告</a></li>
</ul>

<p>主要是针对Crash和ANR的统计。</p>

<h3 id="toc_1">文章推荐</h3>

<ul>
<li><a href="http://www.cocoachina.com/ios/20170302/18815.html">移动端监控体系之技术原理剖析</a></li>
</ul>

<p>监控先于优化。没有数据支撑的优化，往往没有说服力，也很难衡量优化的效果如何。</p>

<ul>
<li><a href="http://blog.flight.dev.qunar.com/2016/11/10/ios-data-persistence-learn/#more">iOS 中数据持久化的几种方式</a></li>
</ul>

<p>大部分App或多或少都会涉及到存储（持久化或缓存）。<a href="https://github.com/ibireme/YYCache">ibireme/YYCache</a>，支持在硬盘持久化和在内存中缓存，从功能、性能和接口易用性上都不错，目前项目中也在用，推荐。</p>

<ul>
<li><p><a href="http://stormzhang.com/2016/09/27/mobile-dev-vs-front-end-web-dev/">移动开发 OR WEB 前端？</a></p></li>
<li><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程</a></p></li>
</ul>

<p>老文章了，视图布局机制在iOS、Android、Html CSS是相通的，可以互相借鉴。<a href="https://github.com/youngsoft/MyLinearLayout">youngsoft/MyLinearLayout</a>实现很多布局机制。</p>

<p>MyLinearLayout is equivalent to: UIStackView of iOS and LinearLayout of Android.</p>

<p>MyRelativeLayout is equivalent to: AutoLayout of iOS and RelativeLayout of Android.</p>

<p>MyFrameLayout is equivalent to: FrameLayout of Android.</p>

<p>MyTableLayout is equivalent to: TableLayout of Android and table of HTML.</p>

<p>MyFlowLayout is equivalent to: flexbox of CSS3.</p>

<p>MyFloatLayout is equivalent to: float of CSS.</p>

<p>借鉴Android的LinearLayout以及Html CSS的FlexBox，自己写了<a href="https://github.com/fanmeiwireless/FMLayouts">FMLayouts</a>，对iOS的布局机制做补充。</p>

<h3 id="toc_2">Android</h3>

<ul>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651434652&amp;idx=1&amp;sn=da0ceda73595e5cb931abad7e51dbe62&amp;chksm=f12887e7c65f0ef1c086784e9ae77a7d9bd82daa6ba0302cebf307577ebd06fd3e0d9e37e87a&amp;mpshare=1&amp;scene=2&amp;srcid=0214hqv992PJvqbW94b0P2pv#rd">2017年,身为Android开发的你必须要掌握的热门开源框架</a></p></li>
<li><p><a href="http://stormzhang.com/2017/02/16/google-events/">你可能不知道 GOOGLE 最近的「小动作」</a></p></li>
</ul>

<h3 id="toc_3">项目</h3>

<ul>
<li><a href="https://github.com/SnapKit/SnapKit">SnapKit/SnapKit</a></li>
</ul>

<p><a href="https://github.com/SnapKit/Masonry">SnapKit/Masonry</a>的Swift版本</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS测试框架XCTest]]></title>
    <link href="https://jacoli.github.io/15480679782543.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782543.html</id>
    <content type="html"><![CDATA[
<ul>
<li>XCTest已基本满足单元测试和UI测试的需求，支持对同步流程、异步流程、性能的测试，UI测试代码的自动生成，代码测试覆盖率的统计等。</li>
<li>UI测试也还有不足的地方，例如录制生成的代码仍不够完善，无法直接访问目标APP的接口，无法修改边界条件，在单设备或单模拟器运行效率过低，每次重启目标App后只能运行一个Case。</li>
<li><a href="https://github.com/vsouza/awesome-ios#ui-testing">一些三方库</a></li>
<li><a href="https://github.com/linkedin/bluepill">Bluepill is a tool to run iOS tests in parallel using multiple simulators.</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/01-introduction.html">XCTest官方手册 </a></li>
<li><a href="http://www.tuicool.com/articles/ZJNzYbY">iOS单元测试和UI测试</a></li>
<li><a href="http://www.tuicool.com/articles/nyQBN3B">单元测试之旅--预见优秀</a></li>
<li><a href="http://www.tuicool.com/articles/fE3Uvqb">iOS UnitTest单元测试</a></li>
<li><a href="http://www.tuicool.com/articles/QfA73qy">Android单元测试的整理</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开发笔记1]]></title>
    <link href="https://jacoli.github.io/15480679782141.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782141.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">文章推荐</h3>

<ul>
<li><a href="http://www.infoq.com/cn/articles/2016-review-mobile">2016移动开发技术巡礼</a></li>
</ul>

<p>徐川大神对2016年移动技术发展的概述，以及对2017年的展望。总结了各种技术，热补丁、组件化、动态化、跨平台、直播、AR/VR等等。自己在项目实践中，也尝试了热补丁、动态化、组件化等技术，比较有体会。推荐他的博客<a href="http://mobilefrontier.github.io/">移动开发前线</a>，还是相当不错的。</p>

<ul>
<li><a href="http://pingguohe.net/2016/01/31/lazyscroll.html">苹果核 - iOS 高性能异构滚动视图构建方案 —— LazyScrollView</a></li>
</ul>

<p>对于往往存在大量异构元素的app首页或集合页，该方案的思路还是可以借鉴下的。</p>

<ul>
<li><a href="http://www.jianshu.com/p/90a90bd13aac">WKWebView从入门到趟坑</a></li>
</ul>

<p>为满足大部分动态化需求，在App中内嵌一个WebView支持H5页，这是比较常见的做法。iOS上就UIWebView和WKWebView，WKWebView相比较UIWebView，性能更优，但也多了不少限制。目前自己项目中也是直接使用WKWebView，好在H5和Native的交互比较少，对WKWebView也没有做多少优化。</p>

<ul>
<li><a href="http://www.cocoachina.com/swift/20161221/18407.html">Swift 并行编程现状和展望 - async/await 和参与者模式</a></li>
</ul>

<p>异步编程，特别是多层嵌套的情况，即使用了GCD&amp;Block回调方式去写，代码仍会过于凌乱，可读性也大打折扣。我会通过以下两种方法去处理，将每个异步回调的处理逻辑封装在一个函数内，或将每个异步过程封装起来（即Future／Promise的做法）。无论哪种，也都会额外增加些成本，结合自己项目内的代码风格和使用成本再选择一个合适的。</p>

<ul>
<li><a href="http://www.cocoachina.com/programmer/20170122/18604.html">2017，我的iOS进阶规划</a></li>
</ul>

<p>知识点比较基础，罗列得比较多，可以结合项目多看看。</p>

<h3 id="toc_1">代码推荐</h3>

<ul>
<li><a href="https://github.com/vsouza/awesome-ios">vsouza/awesome-ios</a></li>
</ul>

<p>收集了大量的iOS开源项目、网页等等</p>

<ul>
<li><a href="http://www.jianshu.com/p/d75a9a8d13b5">33 个 2017 年必须了解的 iOS 开源库</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[* 经过一个月多的努力，app终于成型了，欣喜，期待上线后效果，在这里稍作技术上的总结和展望。]]></title>
    <link href="https://jacoli.github.io/15480679782099.html"/>
    <updated>2019-01-21T18:52:58+08:00</updated>
    <id>https://jacoli.github.io/15480679782099.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p>虽然是首版，功能不多，但麻雀虽小五脏俱全，详情、评论、登录、分享、支付、推送、地图、数据统计、错误统计、Hotfix等基础功能也都要有。</p></li>
<li><p>分层，从上到下，将整体框架划分为业务层，基础服务层，容器运行层，和三方库层。</p></li>
<li><p>组件划分，业务组件化、服务组件化、基础功能组件化</p></li>
<li><p>考虑前面几个版本的快速开发迭代，只做了逻辑上的分层和组件划分，代码仍是在同一个工程内，没有做Bundle化。</p></li>
<li><p>应用整体框架如下，具体细节暂不展开了，后续有时间再细化总结</p></li>
</ul>

<p><img src="http://upload-images.jianshu.io/upload_images/1824896-75b18507cdc838ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="应用整体框架"/><br/>
<img src="http://upload-images.jianshu.io/upload_images/1824896-c637a74c5142cf37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="APP闪屏页"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS学习导图]]></title>
    <link href="https://jacoli.github.io/15479057717732.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717732.html</id>
    <content type="html"><![CDATA[
<p>本文简单罗列了下iOS相关的点。</p>

<h3 id="toc_0">基础</h3>

<p><img src="media/15479057717732/iOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80.png" alt="iOS应用开发基础"/></p>

<ul>
<li>Runloop</li>
</ul>

<p><a href="http://blog.ibireme.com/2015/05/18/runloop/">深入理解RunLoop</a></p>

<ul>
<li>多线程&amp;同步</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/ios-multi-threaded-programming-a-multi-threaded-programming.html">iOS多线程编程指南</a></p>

<ul>
<li>Core Animation</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/coreanimation-programming-guide-summary.html">CoreAnimation编程指南</a></p>

<p><a href="http://www.cnblogs.com/xdream86/p/3250782.html">Core Animation编程指南</a><br/>
<a href="http://www.cocoachina.com/ios/20150104/10814.html">iOS-Core-Animation-Advanced-Techniques</a></p>

<ul>
<li>Block</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/block%E4%BB%8B%E7%BB%8D%EF%BC%88%E4%B8%80%EF%BC%89%E5%9F%BA%E7%A1%80.html">Block介绍</a></p>

<ul>
<li>GCD</li>
</ul>

<p><a href="http://www.dreamingwish.com/article/grand-central-dispatch-basic-1.html">GCD入门</a></p>

<ul>
<li>Core Foundation</li>
</ul>

<p><a href="http://opensource.apple.com/tarballs/CF/">Core Foundation源码</a></p>

<h3 id="toc_1">应用优化</h3>

<ul>
<li><p><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/">iOS 保持界面流畅的技巧</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20150429/11712.html">WWDC心得与延伸:iOS图形性能</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20151203/14549.html">iOS 事件处理机制与图像渲染过程</a></p></li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207890859&amp;idx=1&amp;sn=e98dd604cdb854e7a5808d2072c29162&amp;scene=1&amp;srcid=1119D98cPepPAys5UJjzKkFU&amp;key=d72a47206eca0ea99e5bfedd27c4e1979bafb09babd40343f279933377d574eeac88cdf63260b257d9bf187a90b30d1b&amp;ascene=0&amp;uin=NDEzMTA2OTc1&amp;devicetype=iMac+MacBookPro11%2C2+OSX+OSX+10.11+build(15A284)&amp;version=11020201&amp;pass_ticket=WqTD03t23%2Fz4yjGdIgJ7hHJdRAUd2Xh4DPQpswxoclHSqzbaxr%2B%2F%2B16u%2Fg0PXgMQ">微信iOS卡顿监控系统</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Push相关的资料]]></title>
    <link href="https://jacoli.github.io/15479057717825.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717825.html</id>
    <content type="html"><![CDATA[
<ul>
<li><p>苹果官方的APNS，支持App不同状态下（前台、后台、未启动等）的消息推送。</p></li>
<li><p>另外个方案是，App和应用服务间维护一个长链接，应用服务通过心跳感知App状态。当App为在线状态时，应用服务可以通过该长链接推送消息。一般跟APNS配合使用。</p></li>
<li><p>自己的项目中使用的是友盟推送。</p></li>
<li><p>在Push消息中设置自定义参数，App在<code>- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</code>收到消息后解析参数并做相应逻辑（如跳转到相应页面等）</p></li>
</ul>

<pre><code class="language-text">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    NSLog(@&quot;didRegisterForRemoteNotificationsWithDeviceToken&quot;);
    
    // 注册用户登录登出监听
    [self handleRemoteNotificationDidRegistered];
}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
    NSLog(@&quot;didFailToRegisterForRemoteNotificationsWithError&quot;);
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {
    NSLog(@&quot;didReceiveRemoteNotification&quot;);
    
    [UMessage didReceiveRemoteNotification:userInfo];
    
    NSString *jsonString = [userInfo objectForKey:@&quot;custom&quot;];
    NSData *jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
    NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData
                                                        options:NSJSONReadingMutableContainers
                                                          error:nil];
    if (dic==nil || [dic isEqual:[NSNull null]]) {
        return;
    }

    [self handleRemoteNotification:dic];
}
</code></pre>

<h3 id="toc_0">其他一些资料</h3>

<ul>
<li><a href="http://www.tuicool.com/articles/Y77Ffe">一步一步实现iOS应用PUSH功能 - 咪咕咪咕</a></li>
<li><a href="http://blog.csdn.net/daydreamingboy/article/details/7977098">iOS上简单推送通知（Push Notification）的实现</a></li>
<li><a href="http://blog.csdn.net/c101012221/article/details/34433425">十大豪门推送sdk，哪个更适合你</a></li>
<li><a href="http://www.getui.com/">个推</a></li>
<li><a href="http://www.qcloud.com/product/XGPush.html">腾讯信鸽</a></li>
<li><a href="http://mobile.umeng.com/push?spm=0.0.0.0.pphrqW">友盟U-Push</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动安全]]></title>
    <link href="https://jacoli.github.io/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">安全检查项</h3>

<ul>
<li>移动App上关键数据（密码、个人信息等）在存储、传输等各个阶段需要做一定的安全保护。下图罗列了常见的检查项。
<img src="media/15479057717084/app_security_checks.png" alt="app_security_checks"/></li>
</ul>

<h3 id="toc_1">传输安全</h3>

<ul>
<li><p>保密性，消息是加密的，内容没有泄露，可以用对称加密算法进行加解密，如AES256。</p></li>
<li><p>完整性，消息是完整的，内容没有被篡改，对消息做哈希得到摘要，作为消息的签名。哈希算法有SHA256等，MD5、SHA1已经不太安全，尽量用SHA256等相对安全的算法。</p></li>
<li><p>真实性，消息是可靠的，内容来自受信的来源，验证来源的数字证书是否可靠。</p></li>
</ul>

<h3 id="toc_2">常见工具</h3>

<ul>
<li><p>class-dump-z<br/>
一个跨平台的 Objective-C 接口提取器,用于分析 iPhoneOS 可执行文件中私有的 API。需 通过 Cydia 安装。</p></li>
<li><p>darwin cc tools (otools) 一个开源的苹果程序编译和连接器。需通过 Cydia 安装。</p></li>
<li><p>HTTP代理抓包工具(Fiddler)</p></li>
<li><p>Plist文件查看器(plistEditor) </p></li>
<li><p>iOS内存修改工具(iGameGuard) </p></li>
<li><p>内购破解工具(LocalIAPStore、iAPFree) </p></li>
<li><p>keychain-dumper<br/>
该工具可以读取已越狱 IOS 设备中的 keychain。需通过 Cydia 安装。 </p></li>
<li><p>Link Identity Editor (ldid)<br/>
该工具可以协助测试人员修改 Mach-O 二进制文件的签名信息。需通过 Cydia 安装。 </p></li>
<li><p>OpenSSH<br/>
OpenSSH 是 Linux 下常用的服务,装上后设备可充当 SSH 服务端。需通过 Cydia 安装。 </p></li>
<li><p>Snoop-it<br/>
IOS APP 安全评估工具。可对 APP 进行静态、动态分析。需通过 Cydia 安装。</p></li>
</ul>

<h3 id="toc_3">相关博文</h3>

<ul>
<li><a href="http://security.ios-wiki.com/">ios-security</a></li>
<li><a href="http://drops.wooyun.org/papers/345">在线支付逻辑漏洞总结</a></li>
<li><a href="https://program-think.blogspot.com/2013/02/file-integrity-check.html?utm_source=tuicool&amp;utm_medium=referral">扫盲文件完整性校验——关于散列值和数字签名</a></li>
<li><a href="https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html">数字证书及 CA 的扫盲介绍</a></li>
<li><a href="http://www.techug.com/https-ssl-tls">https-ssl-tls</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动三方应用分享]]></title>
    <link href="https://jacoli.github.io/15479057717149.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717149.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">iOS原生分享控件</h3>

<pre><code class="language-text">    NSString *textToShare = @&quot;要分享的文本内容&quot;;
    UIImage *imageToShare = [UIImage imageNamed:@&quot;shop&quot;];
    NSURL *urlToShare = [NSURL URLWithString:@&quot;http://blog.csdn.net/hitwhylz&quot;];
    NSArray *activityItems = @[textToShare, imageToShare, urlToShare];
    
    UIActivityViewController *vc = [[UIActivityViewController alloc]initWithActivityItems:activityItems applicationActivities:nil];
    [self presentViewController:vc animated:YES completion:nil];
</code></pre>

<h3 id="toc_1">三方开放平台</h3>

<ul>
<li>新浪微博 <a href="http://open.weibo.com">http://open.weibo.com</a></li>
<li>腾讯微博 <a href="http://dev.t.qq.com">http://dev.t.qq.com</a></li>
<li>QQ空间，朋友网 <a href="http://connect.qq.com/intro/login/">http://connect.qq.com/intro/login/</a></li>
<li>QQ分享（QQ好友，QQ群等）<a href="http://mobile.qq.com/api/">http://mobile.qq.com/api/</a></li>
<li>豆瓣社区 <a href="http://developers.douban.com">http://developers.douban.com</a></li>
<li>人人网 <a href="http://dev.renren.com">http://dev.renren.com</a></li>
<li>微信好友 微信朋友圈 <a href="http://open.weixin.qq.com">http://open.weixin.qq.com</a></li>
<li><a href="http://mobile.umeng.com/social?spm=0.0.0.0.lW5N4c">友盟U-Share</a></li>
<li>用过友盟Share，但是遇到友盟ShareSDK中使用的微信SDK版本与官方不同步的问题，后来放弃了友盟ShareSDK，全部采用原生官方SDK，如微信（好友、朋友圈）、QQ、微博，在国内，这三个分享渠道已经能覆盖80%了。</li>
</ul>

<h3 id="toc_2">URL Schemes</h3>

<ul>
<li>iOS应用间可以通过<code>URL Schemes</code>解决相互通信的问题。</li>
<li>DemoA通过<code>openURL</code>唤起DemoB，并带上参数。</li>
</ul>

<pre><code class="language-text">DemoA

[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;demob://page?sourcescheme=demoa&quot;]];
</code></pre>

<ul>
<li>DemoB收到并解析参数并作逻辑处理，然后同样通过<code>openURL</code>返回到DemoA，并带上参数。</li>
</ul>

<pre><code class="language-text">DemoB

- (BOOL)handleUrl:(NSURL *)url {
    NSArray *querys = [url.query componentsSeparatedByString:@&quot;&amp;&quot;];
    
    NSMutableDictionary *queryDict = [[NSMutableDictionary alloc] init];
    for (NSString *q in querys) {
        NSArray *kv = [q componentsSeparatedByString:@&quot;=&quot;];
        if (kv.count == 2) {
            queryDict[kv[0]] = kv[1];
        }
    }
    
    NSString *returnScheme = queryDict[@&quot;sourcescheme&quot;];
    
    UIAlertController *vc = [UIAlertController alertControllerWithTitle:@&quot;url&quot;
                                                                message:url.absoluteString
                                                         preferredStyle:UIAlertControllerStyleAlert];
    [vc addAction:[UIAlertAction actionWithTitle:@&quot;返回原应用&quot;
                                           style:UIAlertActionStyleDefault
                                         handler:^(UIAlertAction * _Nonnull action) {
                                             [[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@&quot;%@://&quot;, returnScheme]]];
                                         }]];
    
    [vc addAction:[UIAlertAction actionWithTitle:@&quot;留在当前应用&quot;
                                           style:UIAlertActionStyleCancel
                                         handler:^(UIAlertAction * _Nonnull action) {
                                         }]];
    
    [self.window.rootViewController presentViewController:vc animated:YES completion:nil];
    
    return YES;
}

- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url NS_DEPRECATED_IOS(2_0, 9_0, &quot;Please use application:openURL:options:&quot;) __TVOS_PROHIBITED {
    return [self handleUrl:url];
}

- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(nullable NSString *)sourceApplication annotation:(id)annotation NS_DEPRECATED_IOS(4_2, 9_0, &quot;Please use application:openURL:options:&quot;) __TVOS_PROHIBITED {
    return [self handleUrl:url];
}

- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;NSString*, id&gt; *)options NS_AVAILABLE_IOS(9_0) {
    return [self handleUrl:url];

}
</code></pre>

<p><img src="media/15479057717149/urlschemedemo.png" alt="urlschemedemo"/></p>

<p><img src="media/15479057717149/iosappsinteraction.png" alt="iosappsinteraction"/></p>

<h3 id="toc_3">三方分享或认证</h3>

<ul>
<li>三方应用分享或认证都会用到<code>URL Schemes</code>流程，实际过程和参数会更复杂点，还需要考虑安全性。</li>
<li><p>如微信三方登录认证，除了三方应用通过URL Scheme跳转微信拿到code，再通过https请求微信后台拿到access_token，后续用https带上access_token可以请求各种资源。<br/>
<img src="media/15479057717149/weixinlogin.png" alt="weixinlogin"/></p></li>
<li><p>三方分享则是通过<code>URL Schemes</code>带上不同格式的数据（文本、图片、链接等）。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模式和架构]]></title>
    <link href="https://jacoli.github.io/15479057717214.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717214.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">编程模式</h3>

<ul>
<li>函数式编程 vs 面向对象编程</li>
<li>响应式编程 vs 命令式编程</li>
<li>promise</li>
</ul>

<h3 id="toc_1">架构、框架、设计模式：</h3>

<ul>
<li>1、架构属于顶层的设计，划分软件或解决方案的整体结构，倾向于抽象，常见的有分层架构、事件驱动架构、微内核架构、微服务架构等。</li>
<li>2、框架类似于提供工具库或类库，倾向于实现。</li>
<li>3、设计模式应该是更细力度的代码层级的复用、可维护性、可扩展性的设计。</li>
</ul>

<h3 id="toc_2">设计模式：</h3>

<ul>
<li>1、基于某种具体场景，代码组织结构或交互行为的设计方法，使得代码更易于复用、维护、扩展。</li>
<li>2、基本的6个原则：开闭原则、里氏替换原则、依赖倒置原则、接口隔离原则、单一职责原则、最少知识原则。</li>
<li>3、创建型模式：工厂方法、抽象工厂、原型、单例、builder</li>
<li>4、结构型:适配器、组合、桥接、decorator、facade、享元、proxy</li>
<li>5、行为型:解释器、模版方法、责任链、命令、迭代器、中介者、memento、观察者、状态、策略、访问者等。</li>
</ul>

<h3 id="toc_3">相关文章</h3>

<p><a href="http://www.cnblogs.com/beijiguangyong/archive/2010/11/15/2302807.html#_Toc281750445">23种设计模式</a></p>

<p><a href="http://www.cnblogs.com/hegezhou_hot/archive/2010/10/08/1846200.html">系统架构师</a></p>

<p>前篇</p>

<pre><code class="language-text">  1、系统架构师-基础到企业应用架构系列之--开卷有益
  2、系统架构师-基础到企业应用架构-系统建模[上篇]
  3、系统架构师-基础到企业应用架构-系统建模[中篇](上)
  4、系统架构师-基础到企业应用架构-系统建模[中篇](下)
  5、系统架构师-基础到企业应用架构-系统建模[下篇]
  6、系统架构师-基础到企业应用架构-系统设计规范与原则[上篇]
  7、系统架构师-基础到企业应用架构-系统设计规范与原则[下篇]
  8、系统架构师-基础到企业应用架构-设计模式[上篇]
  9、系统架构师-基础到企业应用架构-设计模式[中篇]
  10、系统架构师-基础到企业应用架构-设计模式[下篇]
</code></pre>

<p>中篇</p>

<pre><code class="language-text">  11、系统架构师-基础到企业应用架构-企业应用架构
  12、系统架构师-基础到企业应用架构-分层[上篇]
  13、系统架构师-基础到企业应用架构-分层[中篇]
  14、系统架构师-基础到企业应用架构-分层[下篇]
  15、系统架构师-基础到企业应用架构-表现层
  16、系统架构师-基础到企业应用架构-服务层
  17、系统架构师-基础到企业应用架构-业务逻辑层
  18、系统架构师-基础到企业应用架构-数据访问层
  19、系统架构师-基础到企业应用架构-组件服务
  20、系统架构师-基础到企业应用架构-安全机制
</code></pre>

<p>后篇</p>

<pre><code class="language-text">  21、单机应用、客户端/服务器、多服务、企业数据总线全解析
  22、系统架构师-基础到企业应用架构-单机应用(实例及demo)
  23、系统架构师-基础到企业应用架构-客户端/服务器(实例及demo)
  24、系统架构师-基础到企业应用架构-多服务(实例及demo)
  25、系统架构师-基础到企业应用架构-企业数据总线(实例及demo)
  26、系统架构师-基础到企业应用架构-性能优化(架构瓶颈)
  27、系统架构师-基础到企业应用架构-完整的架构方案实例[上篇]
  28、系统架构师-基础到企业应用架构-完整的架构方案实例[中篇]
  29、系统架构师-基础到企业应用架构-完整的架构方案实例[下篇]
  30、系统架构师-基础到企业应用架构-总结及后续
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App安装包过大]]></title>
    <link href="https://jacoli.github.io/15479057717878.html"/>
    <updated>2019-01-19T21:49:31+08:00</updated>
    <id>https://jacoli.github.io/15479057717878.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15479057717878/app_package_too_large.png" alt="app_package_too_large"/></p>

<ul>
<li><p><a href="https://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/On_Demand_Resources_Guide/">On-Demand Resources</a></p></li>
<li><p><a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html">App Thinning</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20151211/14562.html">iOS微信安装包瘦身</a></p></li>
<li><p><a href="http://www.cocoachina.com/ios/20150202/11084.html">iOS可执行文件瘦身方法</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
